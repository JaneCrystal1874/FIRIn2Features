// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module interval_normalizati (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        peaks_V_V_dout,
        peaks_V_V_empty_n,
        peaks_V_V_read,
        normalized_out_V_din,
        normalized_out_V_full_n,
        normalized_out_V_write
);

parameter    ap_ST_fsm_state1 = 42'd1;
parameter    ap_ST_fsm_state2 = 42'd2;
parameter    ap_ST_fsm_state3 = 42'd4;
parameter    ap_ST_fsm_state4 = 42'd8;
parameter    ap_ST_fsm_state5 = 42'd16;
parameter    ap_ST_fsm_state6 = 42'd32;
parameter    ap_ST_fsm_state7 = 42'd64;
parameter    ap_ST_fsm_state8 = 42'd128;
parameter    ap_ST_fsm_state9 = 42'd256;
parameter    ap_ST_fsm_state10 = 42'd512;
parameter    ap_ST_fsm_state11 = 42'd1024;
parameter    ap_ST_fsm_state12 = 42'd2048;
parameter    ap_ST_fsm_state13 = 42'd4096;
parameter    ap_ST_fsm_state14 = 42'd8192;
parameter    ap_ST_fsm_state15 = 42'd16384;
parameter    ap_ST_fsm_state16 = 42'd32768;
parameter    ap_ST_fsm_state17 = 42'd65536;
parameter    ap_ST_fsm_state18 = 42'd131072;
parameter    ap_ST_fsm_state19 = 42'd262144;
parameter    ap_ST_fsm_state20 = 42'd524288;
parameter    ap_ST_fsm_state21 = 42'd1048576;
parameter    ap_ST_fsm_state22 = 42'd2097152;
parameter    ap_ST_fsm_state23 = 42'd4194304;
parameter    ap_ST_fsm_state24 = 42'd8388608;
parameter    ap_ST_fsm_state25 = 42'd16777216;
parameter    ap_ST_fsm_state26 = 42'd33554432;
parameter    ap_ST_fsm_state27 = 42'd67108864;
parameter    ap_ST_fsm_state28 = 42'd134217728;
parameter    ap_ST_fsm_state29 = 42'd268435456;
parameter    ap_ST_fsm_state30 = 42'd536870912;
parameter    ap_ST_fsm_state31 = 42'd1073741824;
parameter    ap_ST_fsm_state32 = 42'd2147483648;
parameter    ap_ST_fsm_state33 = 42'd4294967296;
parameter    ap_ST_fsm_state34 = 42'd8589934592;
parameter    ap_ST_fsm_state35 = 42'd17179869184;
parameter    ap_ST_fsm_state36 = 42'd34359738368;
parameter    ap_ST_fsm_state37 = 42'd68719476736;
parameter    ap_ST_fsm_state38 = 42'd137438953472;
parameter    ap_ST_fsm_state39 = 42'd274877906944;
parameter    ap_ST_fsm_state40 = 42'd549755813888;
parameter    ap_ST_fsm_state41 = 42'd1099511627776;
parameter    ap_ST_fsm_state42 = 42'd2199023255552;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [9:0] peaks_V_V_dout;
input   peaks_V_V_empty_n;
output   peaks_V_V_read;
output  [31:0] normalized_out_V_din;
input   normalized_out_V_full_n;
output   normalized_out_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg peaks_V_V_read;
reg normalized_out_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [41:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    peaks_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_nbreadreq_fu_120_p3;
reg    normalized_out_V_blk_n;
wire    ap_CS_fsm_state42;
wire   [31:0] grp_fu_192_p1;
reg   [31:0] reg_195;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state30;
wire   [31:0] grp_fu_183_p2;
reg   [31:0] reg_201;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state37;
wire   [31:0] grp_fu_175_p2;
reg   [31:0] reg_207;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state41;
reg   [9:0] tmp_V_load_reg_596;
reg    ap_block_state2;
reg   [9:0] tmp_V_6_reg_601;
wire  signed [11:0] select_ln895_fu_265_p3;
reg  signed [11:0] select_ln895_reg_606;
wire   [0:0] icmp_ln79_fu_273_p2;
reg   [0:0] icmp_ln79_reg_611;
wire  signed [31:0] sext_ln86_fu_279_p1;
wire    ap_CS_fsm_state3;
reg   [31:0] tmp_8_reg_620;
wire    ap_CS_fsm_state6;
wire   [31:0] zext_ln87_fu_283_p1;
reg   [31:0] zext_ln87_reg_625;
wire   [31:0] zext_ln85_fu_286_p1;
wire    ap_CS_fsm_state7;
wire   [7:0] i_fu_297_p2;
reg   [7:0] i_reg_638;
wire   [31:0] grp_fu_187_p2;
reg   [31:0] pos_reg_643;
wire    ap_CS_fsm_state25;
wire   [31:0] p_Val2_6_fu_442_p3;
reg   [31:0] p_Val2_6_reg_649;
wire    ap_CS_fsm_state26;
wire  signed [31:0] idx_0_fu_450_p2;
reg  signed [31:0] idx_0_reg_655;
wire    ap_CS_fsm_state27;
reg   [0:0] tmp_14_reg_661;
wire    ap_CS_fsm_state28;
wire   [8:0] trunc_ln1372_fu_476_p1;
reg   [8:0] trunc_ln1372_reg_666;
wire   [8:0] trunc_ln1372_2_fu_480_p1;
reg   [8:0] trunc_ln1372_2_reg_671;
reg   [0:0] tmp_16_reg_676;
wire   [8:0] trunc_ln1372_3_fu_502_p1;
reg   [8:0] trunc_ln1372_3_reg_681;
wire   [8:0] trunc_ln1372_4_fu_506_p1;
reg   [8:0] trunc_ln1372_4_reg_686;
wire    ap_CS_fsm_state29;
wire   [31:0] buf_buffer_q0;
reg   [31:0] v0_reg_701;
wire   [31:0] buf_buffer_q1;
reg   [31:0] v1_reg_707;
wire   [31:0] grp_fu_179_p2;
reg   [31:0] tmp_4_reg_712;
wire   [8:0] buf_buffer_address0;
reg    buf_buffer_ce0;
wire   [8:0] buf_buffer_address1;
reg    buf_buffer_ce1;
reg   [7:0] i_0_reg_164;
wire  signed [63:0] sext_ln544_fu_543_p1;
wire  signed [63:0] sext_ln544_1_fu_581_p1;
reg   [9:0] tmp_V_fu_112;
reg    ap_block_state1;
wire   [0:0] icmp_ln85_fu_291_p2;
reg   [31:0] grp_fu_175_p0;
reg   [31:0] grp_fu_175_p1;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state38;
reg   [31:0] grp_fu_183_p0;
reg   [31:0] grp_fu_183_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state14;
reg  signed [31:0] grp_fu_192_p0;
wire   [10:0] lhs_V_fu_227_p1;
wire   [10:0] rhs_V_fu_231_p1;
wire   [10:0] ret_V_fu_235_p2;
wire   [10:0] sub_ln75_fu_249_p2;
wire  signed [11:0] sext_ln75_fu_255_p1;
wire   [11:0] zext_ln75_fu_245_p1;
wire   [0:0] icmp_ln895_fu_221_p2;
wire  signed [11:0] sext_ln71_fu_241_p1;
wire   [11:0] interval_len_fu_259_p2;
wire   [31:0] p_Val2_s_fu_307_p1;
wire   [22:0] tmp_V_8_fu_328_p1;
wire   [24:0] mantissa_V_fu_332_p4;
wire   [7:0] tmp_V_7_fu_318_p4;
wire   [8:0] zext_ln339_fu_346_p1;
wire   [8:0] add_ln339_fu_350_p2;
wire   [7:0] sub_ln1311_fu_364_p2;
wire   [0:0] isNeg_fu_356_p3;
wire  signed [8:0] sext_ln1311_fu_370_p1;
wire  signed [8:0] ush_fu_374_p3;
wire  signed [31:0] sext_ln1311_1_fu_382_p1;
wire  signed [24:0] sext_ln1311_2_fu_386_p1;
wire   [78:0] zext_ln682_fu_342_p1;
wire   [78:0] zext_ln1287_fu_390_p1;
wire   [24:0] r_V_fu_394_p2;
wire   [0:0] tmp_13_fu_406_p3;
wire   [78:0] r_V_1_fu_400_p2;
wire   [31:0] zext_ln662_fu_414_p1;
wire   [31:0] tmp_2_fu_418_p4;
wire   [31:0] p_Val2_5_fu_428_p3;
wire   [0:0] p_Result_s_fu_310_p3;
wire   [31:0] result_V_1_fu_436_p2;
wire  signed [32:0] rhs_V_1_fu_459_p1;
wire   [32:0] ret_V_4_fu_462_p2;
wire   [31:0] idx_1_fu_454_p2;
wire  signed [32:0] rhs_V_2_fu_484_p1;
wire   [32:0] ret_V_6_fu_488_p2;
wire   [8:0] sub_ln1372_fu_510_p2;
wire   [31:0] tmp_15_fu_515_p3;
wire   [31:0] sub_ln1372_2_fu_523_p2;
wire   [31:0] tmp_6_fu_529_p3;
wire   [31:0] ret_V_5_fu_536_p3;
wire   [8:0] sub_ln1372_3_fu_548_p2;
wire   [31:0] tmp_17_fu_553_p3;
wire   [31:0] sub_ln1372_4_fu_561_p2;
wire   [31:0] tmp_7_fu_567_p3;
wire   [31:0] ret_V_7_fu_574_p3;
reg   [1:0] grp_fu_175_opcode;
reg   [41:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 42'd1;
end

interval_normalizdEe #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
buf_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_buffer_address0),
    .ce0(buf_buffer_ce0),
    .q0(buf_buffer_q0),
    .address1(buf_buffer_address1),
    .ce1(buf_buffer_ce1),
    .q1(buf_buffer_q1)
);

feature_extractoreOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractoreOg_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_175_p0),
    .din1(grp_fu_175_p1),
    .opcode(grp_fu_175_opcode),
    .ce(1'b1),
    .dout(grp_fu_175_p2)
);

feature_extractorfYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractorfYi_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(pos_reg_643),
    .din1(reg_195),
    .ce(1'b1),
    .dout(grp_fu_179_p2)
);

feature_extractorg8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractorg8j_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_183_p0),
    .din1(grp_fu_183_p1),
    .ce(1'b1),
    .dout(grp_fu_183_p2)
);

feature_extractorhbi #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractorhbi_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_201),
    .din1(32'd1128792064),
    .ce(1'b1),
    .dout(grp_fu_187_p2)
);

feature_extractoribs #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractoribs_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_192_p0),
    .ce(1'b1),
    .dout(grp_fu_192_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((tmp_nbreadreq_fu_120_p3 == 1'd1) & (peaks_V_V_empty_n == 1'b0)) & (tmp_nbreadreq_fu_120_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_reg_164 <= 8'd0;
    end else if (((normalized_out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        i_0_reg_164 <= i_reg_638;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_291_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln79_reg_611 == 1'd0))) begin
        tmp_V_fu_112 <= tmp_V_6_reg_601;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_fu_112 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln79_reg_611 == 1'd0))) begin
        i_reg_638 <= i_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_nbreadreq_fu_120_p3 == 1'd1) & (peaks_V_V_empty_n == 1'b0)) & (tmp_nbreadreq_fu_120_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln79_reg_611 <= icmp_ln79_fu_273_p2;
        select_ln895_reg_606 <= select_ln895_fu_265_p3;
        tmp_V_6_reg_601 <= peaks_V_V_dout;
        tmp_V_load_reg_596 <= tmp_V_fu_112;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        idx_0_reg_655 <= idx_0_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        p_Val2_6_reg_649 <= p_Val2_6_fu_442_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        pos_reg_643 <= grp_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_195 <= grp_fu_192_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_201 <= grp_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state34))) begin
        reg_207 <= grp_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_14_reg_661 <= ret_V_4_fu_462_p2[32'd32];
        tmp_16_reg_676 <= ret_V_6_fu_488_p2[32'd32];
        trunc_ln1372_2_reg_671 <= trunc_ln1372_2_fu_480_p1;
        trunc_ln1372_3_reg_681 <= trunc_ln1372_3_fu_502_p1;
        trunc_ln1372_4_reg_686 <= trunc_ln1372_4_fu_506_p1;
        trunc_ln1372_reg_666 <= trunc_ln1372_fu_476_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        tmp_4_reg_712 <= grp_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_8_reg_620 <= grp_fu_192_p1;
        zext_ln87_reg_625[9 : 0] <= zext_ln87_fu_283_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        v0_reg_701 <= buf_buffer_q0;
        v1_reg_707 <= buf_buffer_q1;
    end
end

always @ (*) begin
    if ((~((tmp_nbreadreq_fu_120_p3 == 1'd1) & (peaks_V_V_empty_n == 1'b0)) & (tmp_nbreadreq_fu_120_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        buf_buffer_ce0 = 1'b1;
    end else begin
        buf_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        buf_buffer_ce1 = 1'b1;
    end else begin
        buf_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_175_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_175_opcode = 2'd0;
    end else begin
        grp_fu_175_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_175_p0 = v0_reg_701;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_175_p0 = v1_reg_707;
    end else begin
        grp_fu_175_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_175_p1 = reg_201;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_175_p1 = v0_reg_701;
    end else begin
        grp_fu_175_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_183_p0 = reg_207;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_183_p0 = tmp_8_reg_620;
    end else begin
        grp_fu_183_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_183_p1 = tmp_4_reg_712;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_183_p1 = reg_195;
    end else begin
        grp_fu_183_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_192_p0 = p_Val2_6_reg_649;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_192_p0 = zext_ln85_fu_286_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_192_p0 = sext_ln86_fu_279_p1;
    end else begin
        grp_fu_192_p0 = 'bx;
    end
end

always @ (*) begin
    if ((~((tmp_nbreadreq_fu_120_p3 == 1'd1) & (peaks_V_V_empty_n == 1'b0)) & (tmp_nbreadreq_fu_120_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        normalized_out_V_blk_n = normalized_out_V_full_n;
    end else begin
        normalized_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((normalized_out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        normalized_out_V_write = 1'b1;
    end else begin
        normalized_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_120_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        peaks_V_V_blk_n = peaks_V_V_empty_n;
    end else begin
        peaks_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((tmp_nbreadreq_fu_120_p3 == 1'd1) & (peaks_V_V_empty_n == 1'b0)) & (tmp_nbreadreq_fu_120_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        peaks_V_V_read = 1'b1;
    end else begin
        peaks_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((tmp_nbreadreq_fu_120_p3 == 1'd1) & (peaks_V_V_empty_n == 1'b0)) & (tmp_nbreadreq_fu_120_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((tmp_nbreadreq_fu_120_p3 == 1'd1) & (peaks_V_V_empty_n == 1'b0)) & (icmp_ln79_fu_273_p2 == 1'd1) & (tmp_nbreadreq_fu_120_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((tmp_nbreadreq_fu_120_p3 == 1'd1) & (peaks_V_V_empty_n == 1'b0)) & (tmp_nbreadreq_fu_120_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln79_fu_273_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & ((icmp_ln85_fu_291_p2 == 1'd1) | (icmp_ln79_reg_611 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((normalized_out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln339_fu_350_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_346_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((tmp_nbreadreq_fu_120_p3 == 1'd1) & (peaks_V_V_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign buf_buffer_address0 = sext_ln544_fu_543_p1;

assign buf_buffer_address1 = sext_ln544_1_fu_581_p1;

assign i_fu_297_p2 = (i_0_reg_164 + 8'd1);

assign icmp_ln79_fu_273_p2 = (($signed(select_ln895_fu_265_p3) > $signed(12'd250)) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_291_p2 = ((i_0_reg_164 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_221_p2 = ((peaks_V_V_dout > tmp_V_fu_112) ? 1'b1 : 1'b0);

assign idx_0_fu_450_p2 = (zext_ln87_reg_625 + p_Val2_6_reg_649);

assign idx_1_fu_454_p2 = ($signed(32'd1) + $signed(idx_0_reg_655));

assign interval_len_fu_259_p2 = ($signed(sext_ln75_fu_255_p1) + $signed(zext_ln75_fu_245_p1));

assign isNeg_fu_356_p3 = add_ln339_fu_350_p2[32'd8];

assign lhs_V_fu_227_p1 = peaks_V_V_dout;

assign mantissa_V_fu_332_p4 = {{{{1'd1}, {tmp_V_8_fu_328_p1}}}, {1'd0}};

assign normalized_out_V_din = reg_207;

assign p_Result_s_fu_310_p3 = p_Val2_s_fu_307_p1[32'd31];

assign p_Val2_5_fu_428_p3 = ((isNeg_fu_356_p3[0:0] === 1'b1) ? zext_ln662_fu_414_p1 : tmp_2_fu_418_p4);

assign p_Val2_6_fu_442_p3 = ((p_Result_s_fu_310_p3[0:0] === 1'b1) ? result_V_1_fu_436_p2 : p_Val2_5_fu_428_p3);

assign p_Val2_s_fu_307_p1 = pos_reg_643;

assign r_V_1_fu_400_p2 = zext_ln682_fu_342_p1 << zext_ln1287_fu_390_p1;

assign r_V_fu_394_p2 = mantissa_V_fu_332_p4 >> sext_ln1311_2_fu_386_p1;

assign result_V_1_fu_436_p2 = (32'd0 - p_Val2_5_fu_428_p3);

assign ret_V_4_fu_462_p2 = ($signed(33'd512) - $signed(rhs_V_1_fu_459_p1));

assign ret_V_5_fu_536_p3 = ((tmp_14_reg_661[0:0] === 1'b1) ? sub_ln1372_2_fu_523_p2 : tmp_6_fu_529_p3);

assign ret_V_6_fu_488_p2 = ($signed(33'd512) - $signed(rhs_V_2_fu_484_p1));

assign ret_V_7_fu_574_p3 = ((tmp_16_reg_676[0:0] === 1'b1) ? sub_ln1372_4_fu_561_p2 : tmp_7_fu_567_p3);

assign ret_V_fu_235_p2 = (lhs_V_fu_227_p1 - rhs_V_fu_231_p1);

assign rhs_V_1_fu_459_p1 = idx_0_reg_655;

assign rhs_V_2_fu_484_p1 = $signed(idx_1_fu_454_p2);

assign rhs_V_fu_231_p1 = tmp_V_fu_112;

assign select_ln895_fu_265_p3 = ((icmp_ln895_fu_221_p2[0:0] === 1'b1) ? sext_ln71_fu_241_p1 : interval_len_fu_259_p2);

assign sext_ln1311_1_fu_382_p1 = ush_fu_374_p3;

assign sext_ln1311_2_fu_386_p1 = ush_fu_374_p3;

assign sext_ln1311_fu_370_p1 = $signed(sub_ln1311_fu_364_p2);

assign sext_ln544_1_fu_581_p1 = $signed(ret_V_7_fu_574_p3);

assign sext_ln544_fu_543_p1 = $signed(ret_V_5_fu_536_p3);

assign sext_ln71_fu_241_p1 = $signed(ret_V_fu_235_p2);

assign sext_ln75_fu_255_p1 = $signed(sub_ln75_fu_249_p2);

assign sext_ln86_fu_279_p1 = select_ln895_reg_606;

assign start_out = real_start;

assign sub_ln1311_fu_364_p2 = (8'd127 - tmp_V_7_fu_318_p4);

assign sub_ln1372_2_fu_523_p2 = (32'd0 - tmp_15_fu_515_p3);

assign sub_ln1372_3_fu_548_p2 = (9'd0 - trunc_ln1372_4_reg_686);

assign sub_ln1372_4_fu_561_p2 = (32'd0 - tmp_17_fu_553_p3);

assign sub_ln1372_fu_510_p2 = (9'd0 - trunc_ln1372_2_reg_671);

assign sub_ln75_fu_249_p2 = (11'd512 - rhs_V_fu_231_p1);

assign tmp_13_fu_406_p3 = r_V_fu_394_p2[32'd24];

assign tmp_15_fu_515_p3 = {{23'd0}, {sub_ln1372_fu_510_p2}};

assign tmp_17_fu_553_p3 = {{23'd0}, {sub_ln1372_3_fu_548_p2}};

assign tmp_2_fu_418_p4 = {{r_V_1_fu_400_p2[55:24]}};

assign tmp_6_fu_529_p3 = {{23'd0}, {trunc_ln1372_reg_666}};

assign tmp_7_fu_567_p3 = {{23'd0}, {trunc_ln1372_3_reg_681}};

assign tmp_V_7_fu_318_p4 = {{p_Val2_s_fu_307_p1[30:23]}};

assign tmp_V_8_fu_328_p1 = p_Val2_s_fu_307_p1[22:0];

assign tmp_nbreadreq_fu_120_p3 = peaks_V_V_empty_n;

assign trunc_ln1372_2_fu_480_p1 = ret_V_4_fu_462_p2[8:0];

assign trunc_ln1372_3_fu_502_p1 = ret_V_6_fu_488_p2[8:0];

assign trunc_ln1372_4_fu_506_p1 = ret_V_6_fu_488_p2[8:0];

assign trunc_ln1372_fu_476_p1 = ret_V_4_fu_462_p2[8:0];

assign ush_fu_374_p3 = ((isNeg_fu_356_p3[0:0] === 1'b1) ? sext_ln1311_fu_370_p1 : add_ln339_fu_350_p2);

assign zext_ln1287_fu_390_p1 = $unsigned(sext_ln1311_1_fu_382_p1);

assign zext_ln339_fu_346_p1 = tmp_V_7_fu_318_p4;

assign zext_ln662_fu_414_p1 = tmp_13_fu_406_p3;

assign zext_ln682_fu_342_p1 = mantissa_V_fu_332_p4;

assign zext_ln75_fu_245_p1 = peaks_V_V_dout;

assign zext_ln85_fu_286_p1 = i_0_reg_164;

assign zext_ln87_fu_283_p1 = tmp_V_load_reg_596;

always @ (posedge ap_clk) begin
    zext_ln87_reg_625[31:10] <= 22'b0000000000000000000000;
end

endmodule //interval_normalizati
