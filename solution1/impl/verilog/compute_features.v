// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_features (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        normalized_in_V_dout,
        normalized_in_V_empty_n,
        normalized_in_V_read,
        features_out_V_TDATA,
        features_out_V_TVALID,
        features_out_V_TREADY
);

parameter    ap_ST_fsm_state1 = 53'd1;
parameter    ap_ST_fsm_state2 = 53'd2;
parameter    ap_ST_fsm_state3 = 53'd4;
parameter    ap_ST_fsm_state4 = 53'd8;
parameter    ap_ST_fsm_state5 = 53'd16;
parameter    ap_ST_fsm_state6 = 53'd32;
parameter    ap_ST_fsm_state7 = 53'd64;
parameter    ap_ST_fsm_state8 = 53'd128;
parameter    ap_ST_fsm_state9 = 53'd256;
parameter    ap_ST_fsm_state10 = 53'd512;
parameter    ap_ST_fsm_state11 = 53'd1024;
parameter    ap_ST_fsm_state12 = 53'd2048;
parameter    ap_ST_fsm_state13 = 53'd4096;
parameter    ap_ST_fsm_state14 = 53'd8192;
parameter    ap_ST_fsm_state15 = 53'd16384;
parameter    ap_ST_fsm_state16 = 53'd32768;
parameter    ap_ST_fsm_state17 = 53'd65536;
parameter    ap_ST_fsm_state18 = 53'd131072;
parameter    ap_ST_fsm_state19 = 53'd262144;
parameter    ap_ST_fsm_state20 = 53'd524288;
parameter    ap_ST_fsm_state21 = 53'd1048576;
parameter    ap_ST_fsm_state22 = 53'd2097152;
parameter    ap_ST_fsm_state23 = 53'd4194304;
parameter    ap_ST_fsm_state24 = 53'd8388608;
parameter    ap_ST_fsm_state25 = 53'd16777216;
parameter    ap_ST_fsm_state26 = 53'd33554432;
parameter    ap_ST_fsm_state27 = 53'd67108864;
parameter    ap_ST_fsm_state28 = 53'd134217728;
parameter    ap_ST_fsm_state29 = 53'd268435456;
parameter    ap_ST_fsm_state30 = 53'd536870912;
parameter    ap_ST_fsm_state31 = 53'd1073741824;
parameter    ap_ST_fsm_state32 = 53'd2147483648;
parameter    ap_ST_fsm_state33 = 53'd4294967296;
parameter    ap_ST_fsm_state34 = 53'd8589934592;
parameter    ap_ST_fsm_state35 = 53'd17179869184;
parameter    ap_ST_fsm_state36 = 53'd34359738368;
parameter    ap_ST_fsm_state37 = 53'd68719476736;
parameter    ap_ST_fsm_state38 = 53'd137438953472;
parameter    ap_ST_fsm_state39 = 53'd274877906944;
parameter    ap_ST_fsm_state40 = 53'd549755813888;
parameter    ap_ST_fsm_state41 = 53'd1099511627776;
parameter    ap_ST_fsm_state42 = 53'd2199023255552;
parameter    ap_ST_fsm_state43 = 53'd4398046511104;
parameter    ap_ST_fsm_state44 = 53'd8796093022208;
parameter    ap_ST_fsm_state45 = 53'd17592186044416;
parameter    ap_ST_fsm_state46 = 53'd35184372088832;
parameter    ap_ST_fsm_state47 = 53'd70368744177664;
parameter    ap_ST_fsm_state48 = 53'd140737488355328;
parameter    ap_ST_fsm_state49 = 53'd281474976710656;
parameter    ap_ST_fsm_state50 = 53'd562949953421312;
parameter    ap_ST_fsm_state51 = 53'd1125899906842624;
parameter    ap_ST_fsm_state52 = 53'd2251799813685248;
parameter    ap_ST_fsm_state53 = 53'd4503599627370496;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] normalized_in_V_dout;
input   normalized_in_V_empty_n;
output   normalized_in_V_read;
output  [31:0] features_out_V_TDATA;
output   features_out_V_TVALID;
input   features_out_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg normalized_in_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [52:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] features_out_V_1_data_in;
reg   [31:0] features_out_V_1_data_out;
reg    features_out_V_1_vld_in;
wire    features_out_V_1_vld_out;
wire    features_out_V_1_ack_in;
wire    features_out_V_1_ack_out;
reg   [31:0] features_out_V_1_payload_A;
reg   [31:0] features_out_V_1_payload_B;
reg    features_out_V_1_sel_rd;
reg    features_out_V_1_sel_wr;
wire    features_out_V_1_sel;
wire    features_out_V_1_load_A;
wire    features_out_V_1_load_B;
reg   [1:0] features_out_V_1_state;
wire    features_out_V_1_state_cmp_full;
reg    normalized_in_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln108_fu_426_p2;
reg    features_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire   [31:0] buffer_q0;
reg   [31:0] reg_384;
wire    ap_CS_fsm_state4;
wire   [31:0] buffer_q1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state28;
reg   [31:0] reg_391;
wire   [31:0] grp_fu_333_p2;
reg   [31:0] reg_398;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state32;
wire   [31:0] grp_fu_348_p1;
reg   [31:0] reg_405;
wire    ap_CS_fsm_state17;
reg   [0:0] and_ln124_1_reg_1027;
wire    ap_CS_fsm_state25;
wire   [31:0] grp_fu_340_p2;
reg   [31:0] reg_410;
wire    ap_CS_fsm_state35;
wire   [63:0] grp_fu_377_p2;
reg   [63:0] reg_416;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state49;
wire   [31:0] grp_fu_352_p1;
wire   [7:0] i_fu_432_p2;
reg    ap_block_state2;
wire   [7:0] i_1_fu_449_p2;
reg   [7:0] i_1_reg_959;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln114_fu_443_p2;
wire   [63:0] zext_ln115_1_fu_460_p1;
reg   [63:0] zext_ln115_1_reg_969;
wire   [31:0] zext_ln123_fu_465_p1;
reg   [31:0] zext_ln123_reg_979;
wire    ap_CS_fsm_state10;
wire   [31:0] p_Val2_12_fu_611_p3;
reg   [31:0] p_Val2_12_reg_987;
wire   [0:0] icmp_ln123_fu_469_p2;
wire    ap_CS_fsm_state11;
wire   [7:0] i_2_fu_628_p2;
reg   [7:0] i_2_reg_1002;
wire   [0:0] icmp_ln124_fu_670_p2;
reg   [0:0] icmp_ln124_reg_1007;
wire   [0:0] icmp_ln124_1_fu_676_p2;
reg   [0:0] icmp_ln124_1_reg_1012;
wire   [0:0] icmp_ln124_2_fu_682_p2;
reg   [0:0] icmp_ln124_2_reg_1017;
wire   [0:0] icmp_ln124_3_fu_688_p2;
reg   [0:0] icmp_ln124_3_reg_1022;
wire   [0:0] and_ln124_1_fu_708_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] tdia_1_fu_714_p3;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire   [0:0] icmp_ln129_fu_721_p2;
wire   [6:0] i_3_fu_733_p2;
reg   [6:0] i_3_reg_1050;
wire   [31:0] slope_ip_fu_749_p1;
reg   [31:0] slope_ip_reg_1055;
wire   [0:0] or_ln138_1_fu_783_p2;
reg   [0:0] or_ln138_1_reg_1060;
wire   [31:0] diff1_q0;
reg   [31:0] slope_ip_1_reg_1065;
wire   [31:0] slope_ip_2_fu_872_p3;
wire    ap_CS_fsm_state21;
wire   [31:0] aip_1_fu_879_p3;
wire   [0:0] icmp_ln138_fu_905_p2;
reg   [0:0] icmp_ln138_reg_1082;
wire    ap_CS_fsm_state26;
wire   [0:0] icmp_ln138_1_fu_911_p2;
reg   [0:0] icmp_ln138_1_reg_1087;
wire  signed [31:0] i_4_fu_932_p2;
reg  signed [31:0] i_4_reg_1095;
wire    ap_CS_fsm_state27;
wire   [0:0] and_ln138_1_fu_926_p2;
wire    ap_CS_fsm_state39;
wire   [63:0] grp_fu_356_p1;
reg   [63:0] tmp_5_reg_1115;
wire    ap_CS_fsm_state40;
wire   [63:0] grp_fu_359_p1;
reg   [63:0] tmp_9_reg_1120;
reg   [63:0] tmp_2_reg_1125;
wire    ap_CS_fsm_state44;
wire   [63:0] grp_fu_372_p2;
reg   [63:0] tmp_10_reg_1130;
reg   [63:0] tmp_11_reg_1135;
wire    ap_CS_fsm_state50;
reg   [7:0] buffer_address0;
reg    buffer_ce0;
reg    buffer_we0;
reg   [7:0] buffer_address1;
reg    buffer_ce1;
reg   [7:0] diff1_address0;
reg    diff1_ce0;
reg    diff1_we0;
reg   [7:0] i_0_reg_228;
reg    ap_block_state1;
reg   [7:0] i1_0_reg_239;
wire    ap_CS_fsm_state9;
reg   [31:0] x_assign_reg_250;
reg   [7:0] i2_0_reg_262;
reg   [31:0] p_014_0_reg_274;
reg   [31:0] p_012_0_reg_286;
reg   [6:0] i3_0_reg_298;
reg  signed [31:0] i4_0_reg_309;
reg   [31:0] p_0_0_reg_321;
wire   [63:0] zext_ln109_fu_438_p1;
wire   [63:0] zext_ln115_fu_455_p1;
wire   [63:0] zext_ln124_fu_619_p1;
wire  signed [63:0] sext_ln124_fu_624_p1;
wire   [63:0] zext_ln130_fu_727_p1;
wire  signed [63:0] sext_ln139_fu_938_p1;
wire  signed [63:0] sext_ln139_1_fu_943_p1;
reg   [31:0] grp_fu_333_p0;
reg   [31:0] grp_fu_333_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state36;
reg   [31:0] grp_fu_340_p0;
reg   [31:0] grp_fu_340_p1;
wire    ap_CS_fsm_state33;
reg   [31:0] grp_fu_348_p0;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state22;
reg   [63:0] grp_fu_352_p0;
wire    ap_CS_fsm_state46;
reg   [31:0] grp_fu_356_p0;
wire    ap_CS_fsm_state43;
reg   [31:0] grp_fu_363_p0;
reg   [31:0] grp_fu_363_p1;
reg   [63:0] grp_fu_377_p0;
reg   [63:0] grp_fu_377_p1;
wire   [31:0] p_Val2_s_fu_475_p1;
wire   [22:0] tmp_V_9_fu_497_p1;
wire   [24:0] mantissa_V_fu_501_p4;
wire   [7:0] tmp_V_fu_487_p4;
wire   [8:0] zext_ln339_fu_515_p1;
wire   [8:0] add_ln339_fu_519_p2;
wire   [7:0] sub_ln1311_fu_533_p2;
wire   [0:0] isNeg_fu_525_p3;
wire  signed [8:0] sext_ln1311_fu_539_p1;
wire  signed [8:0] ush_fu_543_p3;
wire  signed [31:0] sext_ln1311_2_fu_551_p1;
wire  signed [24:0] sext_ln1311_3_fu_555_p1;
wire   [78:0] zext_ln682_fu_511_p1;
wire   [78:0] zext_ln1287_fu_559_p1;
wire   [24:0] r_V_fu_563_p2;
wire   [0:0] tmp_25_fu_575_p3;
wire   [78:0] r_V_2_fu_569_p2;
wire   [31:0] zext_ln662_fu_583_p1;
wire   [31:0] tmp_15_fu_587_p4;
wire   [31:0] p_Val2_11_fu_597_p3;
wire   [0:0] p_Result_s_fu_479_p3;
wire   [31:0] result_V_2_fu_605_p2;
wire   [31:0] bitcast_ln124_fu_634_p1;
wire   [31:0] bitcast_ln124_1_fu_652_p1;
wire   [7:0] tmp_12_fu_638_p4;
wire   [22:0] trunc_ln124_fu_648_p1;
wire   [7:0] tmp_13_fu_656_p4;
wire   [22:0] trunc_ln124_1_fu_666_p1;
wire   [0:0] or_ln124_fu_694_p2;
wire   [0:0] or_ln124_1_fu_698_p2;
wire   [0:0] and_ln124_fu_702_p2;
wire   [0:0] grp_fu_363_p2;
wire   [31:0] bitcast_ln135_fu_739_p1;
wire   [31:0] xor_ln135_fu_743_p2;
wire   [31:0] bitcast_ln138_1_fu_753_p1;
wire   [7:0] tmp_16_fu_757_p4;
wire   [22:0] trunc_ln138_fu_767_p1;
wire   [0:0] icmp_ln138_3_fu_777_p2;
wire   [0:0] icmp_ln138_2_fu_771_p2;
wire   [31:0] bitcast_ln130_fu_789_p1;
wire   [31:0] bitcast_ln130_1_fu_806_p1;
wire   [7:0] tmp_17_fu_792_p4;
wire   [22:0] trunc_ln130_fu_802_p1;
wire   [0:0] icmp_ln130_1_fu_830_p2;
wire   [0:0] icmp_ln130_fu_824_p2;
wire   [7:0] tmp_18_fu_810_p4;
wire   [22:0] trunc_ln130_1_fu_820_p1;
wire   [0:0] icmp_ln130_3_fu_848_p2;
wire   [0:0] icmp_ln130_2_fu_842_p2;
wire   [0:0] or_ln130_fu_836_p2;
wire   [0:0] or_ln130_1_fu_854_p2;
wire   [0:0] and_ln130_fu_860_p2;
wire   [0:0] and_ln130_1_fu_866_p2;
wire   [31:0] bitcast_ln138_fu_887_p1;
wire   [7:0] tmp_20_fu_891_p4;
wire   [22:0] trunc_ln138_1_fu_901_p1;
wire   [0:0] or_ln138_fu_917_p2;
wire   [0:0] and_ln138_fu_921_p2;
reg   [1:0] grp_fu_333_opcode;
reg    grp_fu_333_ce;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
reg    grp_fu_340_ce;
wire    ap_CS_fsm_state34;
reg    grp_fu_352_ce;
reg   [4:0] grp_fu_363_opcode;
reg    grp_fu_372_ce;
reg    grp_fu_377_ce;
reg    ap_block_state53;
reg   [52:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 53'd1;
#0 features_out_V_1_sel_rd = 1'b0;
#0 features_out_V_1_sel_wr = 1'b0;
#0 features_out_V_1_state = 2'd0;
end

compute_features_jbC #(
    .DataWidth( 32 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .we0(buffer_we0),
    .d0(normalized_in_V_dout),
    .q0(buffer_q0),
    .address1(buffer_address1),
    .ce1(buffer_ce1),
    .q1(buffer_q1)
);

compute_features_kbM #(
    .DataWidth( 32 ),
    .AddressRange( 199 ),
    .AddressWidth( 8 ))
diff1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(diff1_address0),
    .ce0(diff1_ce0),
    .we0(diff1_we0),
    .d0(reg_398),
    .q0(diff1_q0)
);

feature_extractoreOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractoreOg_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_333_p0),
    .din1(grp_fu_333_p1),
    .opcode(grp_fu_333_opcode),
    .ce(grp_fu_333_ce),
    .dout(grp_fu_333_p2)
);

feature_extractorg8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractorg8j_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_340_p0),
    .din1(grp_fu_340_p1),
    .ce(grp_fu_340_ce),
    .dout(grp_fu_340_p2)
);

feature_extractorlbW #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
feature_extractorlbW_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_348_p0),
    .ce(1'b1),
    .dout(grp_fu_348_p1)
);

feature_extractormb6 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
feature_extractormb6_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_352_p0),
    .ce(grp_fu_352_ce),
    .dout(grp_fu_352_p1)
);

feature_extractorncg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
feature_extractorncg_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_356_p0),
    .ce(1'b1),
    .dout(grp_fu_356_p1)
);

feature_extractorncg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
feature_extractorncg_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_0_0_reg_321),
    .ce(1'b1),
    .dout(grp_fu_359_p1)
);

feature_extractorcud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
feature_extractorcud_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_363_p0),
    .din1(grp_fu_363_p1),
    .ce(1'b1),
    .opcode(grp_fu_363_opcode),
    .dout(grp_fu_363_p2)
);

feature_extractorocq #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
feature_extractorocq_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_9_reg_1120),
    .din1(64'd13815645739448345926),
    .ce(grp_fu_372_ce),
    .dout(grp_fu_372_p2)
);

feature_extractorpcA #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
feature_extractorpcA_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_377_p0),
    .din1(grp_fu_377_p1),
    .ce(grp_fu_377_ce),
    .dout(grp_fu_377_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((features_out_V_1_state == 2'd1) | (features_out_V_1_ack_in == 1'b0) | ((features_out_V_1_state == 2'd3) & (features_out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state53))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        features_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((features_out_V_1_ack_out == 1'b1) & (features_out_V_1_vld_out == 1'b1))) begin
            features_out_V_1_sel_rd <= ~features_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        features_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((features_out_V_1_ack_in == 1'b1) & (features_out_V_1_vld_in == 1'b1))) begin
            features_out_V_1_sel_wr <= ~features_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        features_out_V_1_state <= 2'd0;
    end else begin
        if ((((features_out_V_1_state == 2'd2) & (features_out_V_1_vld_in == 1'b0)) | ((features_out_V_1_state == 2'd3) & (features_out_V_1_vld_in == 1'b0) & (features_out_V_1_ack_out == 1'b1)))) begin
            features_out_V_1_state <= 2'd2;
        end else if ((((features_out_V_1_state == 2'd1) & (features_out_V_TREADY == 1'b0)) | ((features_out_V_1_state == 2'd3) & (features_out_V_TREADY == 1'b0) & (features_out_V_1_vld_in == 1'b1)))) begin
            features_out_V_1_state <= 2'd1;
        end else if (((~((features_out_V_1_vld_in == 1'b0) & (features_out_V_1_ack_out == 1'b1)) & ~((features_out_V_TREADY == 1'b0) & (features_out_V_1_vld_in == 1'b1)) & (features_out_V_1_state == 2'd3)) | ((features_out_V_1_state == 2'd1) & (features_out_V_1_ack_out == 1'b1)) | ((features_out_V_1_state == 2'd2) & (features_out_V_1_vld_in == 1'b1)))) begin
            features_out_V_1_state <= 2'd3;
        end else begin
            features_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln108_fu_426_p2 == 1'd0) & (normalized_in_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln108_fu_426_p2 == 1'd1))) begin
        i1_0_reg_239 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i1_0_reg_239 <= i_1_reg_959;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln114_fu_443_p2 == 1'd1))) begin
        i2_0_reg_262 <= 8'd100;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i2_0_reg_262 <= i_2_reg_1002;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln123_fu_469_p2 == 1'd1))) begin
        i3_0_reg_298 <= 7'd20;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        i3_0_reg_298 <= i_3_reg_1050;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        i4_0_reg_309 <= i_4_reg_1095;
    end else if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln129_fu_721_p2 == 1'd1))) begin
        i4_0_reg_309 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln108_fu_426_p2 == 1'd0) & (normalized_in_V_empty_n == 1'b0)) & (icmp_ln108_fu_426_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_228 <= i_fu_432_p2;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_228 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln123_fu_469_p2 == 1'd1))) begin
        p_012_0_reg_286 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        p_012_0_reg_286 <= aip_1_fu_879_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln123_fu_469_p2 == 1'd1))) begin
        p_014_0_reg_274 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        p_014_0_reg_274 <= slope_ip_2_fu_872_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        p_0_0_reg_321 <= grp_fu_333_p2;
    end else if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln129_fu_721_p2 == 1'd1))) begin
        p_0_0_reg_321 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_384 <= buffer_q1;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_384 <= buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        reg_391 <= buffer_q0;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_391 <= buffer_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln114_fu_443_p2 == 1'd1))) begin
        x_assign_reg_250 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        x_assign_reg_250 <= tdia_1_fu_714_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        and_ln124_1_reg_1027 <= and_ln124_1_fu_708_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((features_out_V_1_load_A == 1'b1)) begin
        features_out_V_1_payload_A <= features_out_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((features_out_V_1_load_B == 1'b1)) begin
        features_out_V_1_payload_B <= features_out_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_959 <= i_1_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_2_reg_1002 <= i_2_fu_628_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_721_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        i_3_reg_1050 <= i_3_fu_733_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_4_reg_1095 <= i_4_fu_932_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        icmp_ln124_1_reg_1012 <= icmp_ln124_1_fu_676_p2;
        icmp_ln124_2_reg_1017 <= icmp_ln124_2_fu_682_p2;
        icmp_ln124_3_reg_1022 <= icmp_ln124_3_fu_688_p2;
        icmp_ln124_reg_1007 <= icmp_ln124_fu_670_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        icmp_ln138_1_reg_1087 <= icmp_ln138_1_fu_911_p2;
        icmp_ln138_reg_1082 <= icmp_ln138_fu_905_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln129_fu_721_p2 == 1'd1))) begin
        or_ln138_1_reg_1060 <= or_ln138_1_fu_783_p2;
        slope_ip_reg_1055 <= slope_ip_fu_749_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        p_Val2_12_reg_987 <= p_Val2_12_fu_611_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state8) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42)))) begin
        reg_398 <= grp_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state17) & (1'd1 == and_ln124_1_reg_1027)))) begin
        reg_405 <= grp_fu_348_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state41)))) begin
        reg_410 <= grp_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state45))) begin
        reg_416 <= grp_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        slope_ip_1_reg_1065 <= diff1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        tmp_10_reg_1130 <= grp_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        tmp_11_reg_1135 <= grp_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        tmp_2_reg_1125 <= grp_fu_356_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        tmp_5_reg_1115 <= grp_fu_356_p1;
        tmp_9_reg_1120 <= grp_fu_359_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln114_fu_443_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln115_1_reg_969[7 : 0] <= zext_ln115_1_fu_460_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        zext_ln123_reg_979[7 : 0] <= zext_ln123_fu_465_p1[7 : 0];
    end
end

always @ (*) begin
    if ((~((features_out_V_1_state == 2'd1) | (features_out_V_1_ack_in == 1'b0) | ((features_out_V_1_state == 2'd3) & (features_out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state53))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((features_out_V_1_state == 2'd1) | (features_out_V_1_ack_in == 1'b0) | ((features_out_V_1_state == 2'd3) & (features_out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state53))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        buffer_address0 = sext_ln139_fu_938_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buffer_address0 = sext_ln124_fu_624_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_address0 = zext_ln115_fu_455_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_address0 = zext_ln109_fu_438_p1;
    end else begin
        buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        buffer_address1 = sext_ln139_1_fu_943_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buffer_address1 = zext_ln130_fu_727_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buffer_address1 = zext_ln124_fu_619_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_address1 = zext_ln115_1_fu_460_p1;
    end else begin
        buffer_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3) | (~((icmp_ln108_fu_426_p2 == 1'd0) & (normalized_in_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        buffer_ce0 = 1'b1;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3))) begin
        buffer_ce1 = 1'b1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln108_fu_426_p2 == 1'd0) & (normalized_in_V_empty_n == 1'b0)) & (icmp_ln108_fu_426_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        buffer_we0 = 1'b1;
    end else begin
        buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        diff1_address0 = zext_ln130_fu_727_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        diff1_address0 = zext_ln115_1_reg_969;
    end else begin
        diff1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state19))) begin
        diff1_ce0 = 1'b1;
    end else begin
        diff1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        diff1_we0 = 1'b1;
    end else begin
        diff1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state47))) begin
        features_out_V_1_data_in = grp_fu_352_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        features_out_V_1_data_in = grp_fu_340_p2;
    end else begin
        features_out_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((features_out_V_1_sel == 1'b1)) begin
        features_out_V_1_data_out = features_out_V_1_payload_B;
    end else begin
        features_out_V_1_data_out = features_out_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state52)) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state51)) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state47)) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state41)))) begin
        features_out_V_1_vld_in = 1'b1;
    end else begin
        features_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        features_out_V_TDATA_blk_n = features_out_V_1_state[1'd1];
    end else begin
        features_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state8) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state41)))) begin
        grp_fu_333_ce = 1'b1;
    end else begin
        grp_fu_333_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_333_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state29) | ((1'd0 == and_ln138_1_fu_926_p2) & (1'b1 == ap_CS_fsm_state27)))) begin
        grp_fu_333_opcode = 2'd0;
    end else begin
        grp_fu_333_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_333_p0 = p_0_0_reg_321;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_333_p0 = x_assign_reg_250;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_333_p0 = reg_384;
    end else begin
        grp_fu_333_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_333_p1 = reg_410;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_333_p1 = 32'd3268018176;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_333_p1 = reg_391;
    end else begin
        grp_fu_333_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state35) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state41)))) begin
        grp_fu_340_ce = 1'b1;
    end else begin
        grp_fu_340_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_340_p0 = reg_398;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_340_p0 = p_012_0_reg_286;
    end else begin
        grp_fu_340_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_340_p1 = 32'd1056964608;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_340_p1 = 32'd1082130432;
    end else begin
        grp_fu_340_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_348_p0 = i4_0_reg_309;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_348_p0 = zext_ln123_reg_979;
    end else begin
        grp_fu_348_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state50) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state52)) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state51)) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state47)))) begin
        grp_fu_352_ce = 1'b1;
    end else begin
        grp_fu_352_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_fu_352_p0 = tmp_11_reg_1135;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state50))) begin
        grp_fu_352_p0 = reg_416;
    end else begin
        grp_fu_352_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_356_p0 = reg_398;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_356_p0 = slope_ip_reg_1055;
    end else begin
        grp_fu_356_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_363_opcode = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_363_opcode = 5'd2;
    end else begin
        grp_fu_363_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_363_p0 = reg_405;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_363_p0 = diff1_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_363_p0 = buffer_q1;
    end else begin
        grp_fu_363_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_363_p1 = x_assign_reg_250;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_363_p1 = p_014_0_reg_274;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_363_p1 = buffer_q0;
    end else begin
        grp_fu_363_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state41)))) begin
        grp_fu_372_ce = 1'b1;
    end else begin
        grp_fu_372_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state45) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state48)) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state47)) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state41)))) begin
        grp_fu_377_ce = 1'b1;
    end else begin
        grp_fu_377_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_377_p0 = tmp_10_reg_1130;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_377_p0 = tmp_2_reg_1125;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_377_p0 = tmp_5_reg_1115;
    end else begin
        grp_fu_377_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_377_p1 = 64'd4587366580439587226;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_377_p1 = 64'd4576918229304087675;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_377_p1 = 64'd4637327299356831307;
    end else begin
        grp_fu_377_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln108_fu_426_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        normalized_in_V_blk_n = normalized_in_V_empty_n;
    end else begin
        normalized_in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln108_fu_426_p2 == 1'd0) & (normalized_in_V_empty_n == 1'b0)) & (icmp_ln108_fu_426_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        normalized_in_V_read = 1'b1;
    end else begin
        normalized_in_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln108_fu_426_p2 == 1'd0) & (normalized_in_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln108_fu_426_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln108_fu_426_p2 == 1'd0) & (normalized_in_V_empty_n == 1'b0)) & (icmp_ln108_fu_426_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln114_fu_443_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln123_fu_469_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln129_fu_721_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((1'd0 == and_ln138_1_fu_926_p2) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((features_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if ((~((features_out_V_1_state == 2'd1) | (features_out_V_1_ack_in == 1'b0) | ((features_out_V_1_state == 2'd3) & (features_out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln339_fu_519_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_515_p1));

assign aip_1_fu_879_p3 = ((and_ln130_1_fu_866_p2[0:0] === 1'b1) ? reg_384 : p_012_0_reg_286);

assign and_ln124_1_fu_708_p2 = (grp_fu_363_p2 & and_ln124_fu_702_p2);

assign and_ln124_fu_702_p2 = (or_ln124_fu_694_p2 & or_ln124_1_fu_698_p2);

assign and_ln130_1_fu_866_p2 = (grp_fu_363_p2 & and_ln130_fu_860_p2);

assign and_ln130_fu_860_p2 = (or_ln130_fu_836_p2 & or_ln130_1_fu_854_p2);

assign and_ln138_1_fu_926_p2 = (grp_fu_363_p2 & and_ln138_fu_921_p2);

assign and_ln138_fu_921_p2 = (or_ln138_fu_917_p2 & or_ln138_1_reg_1060);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln108_fu_426_p2 == 1'd0) & (normalized_in_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state53 = ((features_out_V_1_state == 2'd1) | ((features_out_V_1_state == 2'd3) & (features_out_V_TREADY == 1'b0)));
end

assign bitcast_ln124_1_fu_652_p1 = buffer_q0;

assign bitcast_ln124_fu_634_p1 = buffer_q1;

assign bitcast_ln130_1_fu_806_p1 = p_014_0_reg_274;

assign bitcast_ln130_fu_789_p1 = slope_ip_1_reg_1065;

assign bitcast_ln135_fu_739_p1 = p_014_0_reg_274;

assign bitcast_ln138_1_fu_753_p1 = x_assign_reg_250;

assign bitcast_ln138_fu_887_p1 = reg_405;

assign features_out_V_1_ack_in = features_out_V_1_state[1'd1];

assign features_out_V_1_ack_out = features_out_V_TREADY;

assign features_out_V_1_load_A = (features_out_V_1_state_cmp_full & ~features_out_V_1_sel_wr);

assign features_out_V_1_load_B = (features_out_V_1_state_cmp_full & features_out_V_1_sel_wr);

assign features_out_V_1_sel = features_out_V_1_sel_rd;

assign features_out_V_1_state_cmp_full = ((features_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign features_out_V_1_vld_out = features_out_V_1_state[1'd0];

assign features_out_V_TDATA = features_out_V_1_data_out;

assign features_out_V_TVALID = features_out_V_1_state[1'd0];

assign i_1_fu_449_p2 = (i1_0_reg_239 + 8'd1);

assign i_2_fu_628_p2 = (8'd1 + i2_0_reg_262);

assign i_3_fu_733_p2 = (7'd1 + i3_0_reg_298);

assign i_4_fu_932_p2 = ($signed(32'd1) + $signed(i4_0_reg_309));

assign i_fu_432_p2 = (i_0_reg_228 + 8'd1);

assign icmp_ln108_fu_426_p2 = ((i_0_reg_228 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_443_p2 = ((i1_0_reg_239 == 8'd199) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_469_p2 = ((i2_0_reg_262 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln124_1_fu_676_p2 = ((trunc_ln124_fu_648_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln124_2_fu_682_p2 = ((tmp_13_fu_656_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln124_3_fu_688_p2 = ((trunc_ln124_1_fu_666_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_670_p2 = ((tmp_12_fu_638_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_721_p2 = ((i3_0_reg_298 == 7'd99) ? 1'b1 : 1'b0);

assign icmp_ln130_1_fu_830_p2 = ((trunc_ln130_fu_802_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln130_2_fu_842_p2 = ((tmp_18_fu_810_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln130_3_fu_848_p2 = ((trunc_ln130_1_fu_820_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_824_p2 = ((tmp_17_fu_792_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln138_1_fu_911_p2 = ((trunc_ln138_1_fu_901_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln138_2_fu_771_p2 = ((tmp_16_fu_757_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln138_3_fu_777_p2 = ((trunc_ln138_fu_767_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln138_fu_905_p2 = ((tmp_20_fu_891_p4 != 8'd255) ? 1'b1 : 1'b0);

assign isNeg_fu_525_p3 = add_ln339_fu_519_p2[32'd8];

assign mantissa_V_fu_501_p4 = {{{{1'd1}, {tmp_V_9_fu_497_p1}}}, {1'd0}};

assign or_ln124_1_fu_698_p2 = (icmp_ln124_3_reg_1022 | icmp_ln124_2_reg_1017);

assign or_ln124_fu_694_p2 = (icmp_ln124_reg_1007 | icmp_ln124_1_reg_1012);

assign or_ln130_1_fu_854_p2 = (icmp_ln130_3_fu_848_p2 | icmp_ln130_2_fu_842_p2);

assign or_ln130_fu_836_p2 = (icmp_ln130_fu_824_p2 | icmp_ln130_1_fu_830_p2);

assign or_ln138_1_fu_783_p2 = (icmp_ln138_3_fu_777_p2 | icmp_ln138_2_fu_771_p2);

assign or_ln138_fu_917_p2 = (icmp_ln138_reg_1082 | icmp_ln138_1_reg_1087);

assign p_Result_s_fu_479_p3 = p_Val2_s_fu_475_p1[32'd31];

assign p_Val2_11_fu_597_p3 = ((isNeg_fu_525_p3[0:0] === 1'b1) ? zext_ln662_fu_583_p1 : tmp_15_fu_587_p4);

assign p_Val2_12_fu_611_p3 = ((p_Result_s_fu_479_p3[0:0] === 1'b1) ? result_V_2_fu_605_p2 : p_Val2_11_fu_597_p3);

assign p_Val2_s_fu_475_p1 = x_assign_reg_250;

assign r_V_2_fu_569_p2 = zext_ln682_fu_511_p1 << zext_ln1287_fu_559_p1;

assign r_V_fu_563_p2 = mantissa_V_fu_501_p4 >> sext_ln1311_3_fu_555_p1;

assign result_V_2_fu_605_p2 = (32'd0 - p_Val2_11_fu_597_p3);

assign sext_ln124_fu_624_p1 = $signed(p_Val2_12_reg_987);

assign sext_ln1311_2_fu_551_p1 = ush_fu_543_p3;

assign sext_ln1311_3_fu_555_p1 = ush_fu_543_p3;

assign sext_ln1311_fu_539_p1 = $signed(sub_ln1311_fu_533_p2);

assign sext_ln139_1_fu_943_p1 = i_4_fu_932_p2;

assign sext_ln139_fu_938_p1 = i4_0_reg_309;

assign slope_ip_2_fu_872_p3 = ((and_ln130_1_fu_866_p2[0:0] === 1'b1) ? slope_ip_1_reg_1065 : p_014_0_reg_274);

assign slope_ip_fu_749_p1 = xor_ln135_fu_743_p2;

assign sub_ln1311_fu_533_p2 = (8'd127 - tmp_V_fu_487_p4);

assign tdia_1_fu_714_p3 = ((and_ln124_1_reg_1027[0:0] === 1'b1) ? reg_405 : x_assign_reg_250);

assign tmp_12_fu_638_p4 = {{bitcast_ln124_fu_634_p1[30:23]}};

assign tmp_13_fu_656_p4 = {{bitcast_ln124_1_fu_652_p1[30:23]}};

assign tmp_15_fu_587_p4 = {{r_V_2_fu_569_p2[55:24]}};

assign tmp_16_fu_757_p4 = {{bitcast_ln138_1_fu_753_p1[30:23]}};

assign tmp_17_fu_792_p4 = {{bitcast_ln130_fu_789_p1[30:23]}};

assign tmp_18_fu_810_p4 = {{bitcast_ln130_1_fu_806_p1[30:23]}};

assign tmp_20_fu_891_p4 = {{bitcast_ln138_fu_887_p1[30:23]}};

assign tmp_25_fu_575_p3 = r_V_fu_563_p2[32'd24];

assign tmp_V_9_fu_497_p1 = p_Val2_s_fu_475_p1[22:0];

assign tmp_V_fu_487_p4 = {{p_Val2_s_fu_475_p1[30:23]}};

assign trunc_ln124_1_fu_666_p1 = bitcast_ln124_1_fu_652_p1[22:0];

assign trunc_ln124_fu_648_p1 = bitcast_ln124_fu_634_p1[22:0];

assign trunc_ln130_1_fu_820_p1 = bitcast_ln130_1_fu_806_p1[22:0];

assign trunc_ln130_fu_802_p1 = bitcast_ln130_fu_789_p1[22:0];

assign trunc_ln138_1_fu_901_p1 = bitcast_ln138_fu_887_p1[22:0];

assign trunc_ln138_fu_767_p1 = bitcast_ln138_1_fu_753_p1[22:0];

assign ush_fu_543_p3 = ((isNeg_fu_525_p3[0:0] === 1'b1) ? sext_ln1311_fu_539_p1 : add_ln339_fu_519_p2);

assign xor_ln135_fu_743_p2 = (bitcast_ln135_fu_739_p1 ^ 32'd2147483648);

assign zext_ln109_fu_438_p1 = i_0_reg_228;

assign zext_ln115_1_fu_460_p1 = i1_0_reg_239;

assign zext_ln115_fu_455_p1 = i_1_fu_449_p2;

assign zext_ln123_fu_465_p1 = i2_0_reg_262;

assign zext_ln124_fu_619_p1 = i2_0_reg_262;

assign zext_ln1287_fu_559_p1 = $unsigned(sext_ln1311_2_fu_551_p1);

assign zext_ln130_fu_727_p1 = i3_0_reg_298;

assign zext_ln339_fu_515_p1 = tmp_V_fu_487_p4;

assign zext_ln662_fu_583_p1 = tmp_25_fu_575_p3;

assign zext_ln682_fu_511_p1 = mantissa_V_fu_501_p4;

always @ (posedge ap_clk) begin
    zext_ln115_1_reg_969[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln123_reg_979[31:8] <= 24'b000000000000000000000000;
end

endmodule //compute_features
