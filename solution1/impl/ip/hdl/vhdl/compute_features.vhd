-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_features is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    normalized_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    normalized_in_V_empty_n : IN STD_LOGIC;
    normalized_in_V_read : OUT STD_LOGIC;
    features_out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    features_out_V_TVALID : OUT STD_LOGIC;
    features_out_V_TREADY : IN STD_LOGIC );
end;


architecture behav of compute_features is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (52 downto 0) := "00000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (52 downto 0) := "00000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (52 downto 0) := "00000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (52 downto 0) := "00000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (52 downto 0) := "00000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (52 downto 0) := "00000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (52 downto 0) := "00001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (52 downto 0) := "00010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (52 downto 0) := "00100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (52 downto 0) := "01000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (52 downto 0) := "10000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv7_14 : STD_LOGIC_VECTOR (6 downto 0) := "0010100";
    constant ap_const_lv32_C2CA0000 : STD_LOGIC_VECTOR (31 downto 0) := "11000010110010100000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_40800000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000100000000000000000000000";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv64_BFBB089A02752546 : STD_LOGIC_VECTOR (63 downto 0) := "1011111110111011000010001001101000000010011101010010010101000110";
    constant ap_const_lv64_405B189BF162AE4B : STD_LOGIC_VECTOR (63 downto 0) := "0100000001011011000110001001101111110001011000101010111001001011";
    constant ap_const_lv64_3F847AE147AE147B : STD_LOGIC_VECTOR (63 downto 0) := "0011111110000100011110101110000101000111101011100001010001111011";
    constant ap_const_lv64_3FA999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111110101001100110011001100110011001100110011001100110011010";
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_C7 : STD_LOGIC_VECTOR (7 downto 0) := "11000111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal features_out_V_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal features_out_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal features_out_V_1_vld_in : STD_LOGIC;
    signal features_out_V_1_vld_out : STD_LOGIC;
    signal features_out_V_1_ack_in : STD_LOGIC;
    signal features_out_V_1_ack_out : STD_LOGIC;
    signal features_out_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal features_out_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal features_out_V_1_sel_rd : STD_LOGIC := '0';
    signal features_out_V_1_sel_wr : STD_LOGIC := '0';
    signal features_out_V_1_sel : STD_LOGIC;
    signal features_out_V_1_load_A : STD_LOGIC;
    signal features_out_V_1_load_B : STD_LOGIC;
    signal features_out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal features_out_V_1_state_cmp_full : STD_LOGIC;
    signal normalized_in_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln108_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal features_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal buffer_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal and_ln124_1_reg_1027 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_377_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_416 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_432_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal i_1_fu_449_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_959 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln114_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln115_1_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln115_1_reg_969 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln123_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln123_reg_979 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Val2_12_fu_611_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_12_reg_987 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln123_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_2_fu_628_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_reg_1002 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln124_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_1007 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_1_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_1_reg_1012 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_2_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_2_reg_1017 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_3_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_3_reg_1022 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln124_1_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tdia_1_fu_714_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln129_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_733_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_1050 : STD_LOGIC_VECTOR (6 downto 0);
    signal slope_ip_fu_749_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slope_ip_reg_1055 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln138_1_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln138_1_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal diff1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal slope_ip_1_reg_1065 : STD_LOGIC_VECTOR (31 downto 0);
    signal slope_ip_2_fu_872_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal aip_1_fu_879_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln138_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_1082 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln138_1_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_1_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_932_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal and_ln138_1_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_1115 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_1120 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_1125 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_372_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_reg_1130 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_reg_1135 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal buffer_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_we0 : STD_LOGIC;
    signal buffer_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_ce1 : STD_LOGIC;
    signal diff1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal diff1_ce0 : STD_LOGIC;
    signal diff1_we0 : STD_LOGIC;
    signal i_0_reg_228 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i1_0_reg_239 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal x_assign_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_0_reg_262 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_014_0_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_012_0_reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal i3_0_reg_298 : STD_LOGIC_VECTOR (6 downto 0);
    signal i4_0_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_0_reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln109_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln115_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln124_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln139_fu_938_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln139_1_fu_943_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_fu_340_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_348_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_352_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_356_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_363_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_475_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_9_fu_497_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_501_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_487_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_515_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_519_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_525_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_539_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_543_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_2_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_3_fu_555_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_511_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_559_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_563_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_25_fu_575_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_569_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_587_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_11_fu_597_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_479_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_2_fu_605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln124_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln124_1_fu_652_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_638_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln124_fu_648_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_13_fu_656_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln124_1_fu_666_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln124_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln124_1_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln124_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln135_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln135_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln138_1_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_757_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln138_fu_767_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln138_3_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_2_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln130_fu_789_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln130_1_fu_806_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_792_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln130_fu_802_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln130_1_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln130_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_810_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln130_1_fu_820_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln130_3_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln130_2_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln130_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln130_1_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln130_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln130_1_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln138_fu_887_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_891_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln138_1_fu_901_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln138_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_333_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_333_ce : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_340_ce : STD_LOGIC;
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_352_ce : STD_LOGIC;
    signal grp_fu_363_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_372_ce : STD_LOGIC;
    signal grp_fu_377_ce : STD_LOGIC;
    signal ap_block_state53 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (52 downto 0);

    component feature_extractoreOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component feature_extractorg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component feature_extractorlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component feature_extractormb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component feature_extractorncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component feature_extractorcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component feature_extractorocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component feature_extractorpcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component compute_features_jbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compute_features_kbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buffer_U : component compute_features_jbC
    generic map (
        DataWidth => 32,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        we0 => buffer_we0,
        d0 => normalized_in_V_dout,
        q0 => buffer_q0,
        address1 => buffer_address1,
        ce1 => buffer_ce1,
        q1 => buffer_q1);

    diff1_U : component compute_features_kbM
    generic map (
        DataWidth => 32,
        AddressRange => 199,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => diff1_address0,
        ce0 => diff1_ce0,
        we0 => diff1_we0,
        d0 => reg_398,
        q0 => diff1_q0);

    feature_extractoreOg_U20 : component feature_extractoreOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_333_p0,
        din1 => grp_fu_333_p1,
        opcode => grp_fu_333_opcode,
        ce => grp_fu_333_ce,
        dout => grp_fu_333_p2);

    feature_extractorg8j_U21 : component feature_extractorg8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_340_p0,
        din1 => grp_fu_340_p1,
        ce => grp_fu_340_ce,
        dout => grp_fu_340_p2);

    feature_extractorlbW_U22 : component feature_extractorlbW
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_348_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_348_p1);

    feature_extractormb6_U23 : component feature_extractormb6
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_352_p0,
        ce => grp_fu_352_ce,
        dout => grp_fu_352_p1);

    feature_extractorncg_U24 : component feature_extractorncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_356_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_356_p1);

    feature_extractorncg_U25 : component feature_extractorncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_0_0_reg_321,
        ce => ap_const_logic_1,
        dout => grp_fu_359_p1);

    feature_extractorcud_U26 : component feature_extractorcud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_363_p0,
        din1 => grp_fu_363_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_363_opcode,
        dout => grp_fu_363_p2);

    feature_extractorocq_U27 : component feature_extractorocq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_reg_1120,
        din1 => ap_const_lv64_BFBB089A02752546,
        ce => grp_fu_372_ce,
        dout => grp_fu_372_p2);

    feature_extractorpcA_U28 : component feature_extractorpcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_377_p0,
        din1 => grp_fu_377_p1,
        ce => grp_fu_377_ce,
        dout => grp_fu_377_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((features_out_V_1_state = ap_const_lv2_1) or (features_out_V_1_ack_in = ap_const_logic_0) or ((features_out_V_1_state = ap_const_lv2_3) and (features_out_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    features_out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                features_out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((features_out_V_1_ack_out = ap_const_logic_1) and (features_out_V_1_vld_out = ap_const_logic_1))) then 
                                        features_out_V_1_sel_rd <= not(features_out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    features_out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                features_out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((features_out_V_1_ack_in = ap_const_logic_1) and (features_out_V_1_vld_in = ap_const_logic_1))) then 
                                        features_out_V_1_sel_wr <= not(features_out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    features_out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                features_out_V_1_state <= ap_const_lv2_0;
            else
                if ((((features_out_V_1_state = ap_const_lv2_2) and (features_out_V_1_vld_in = ap_const_logic_0)) or ((features_out_V_1_state = ap_const_lv2_3) and (features_out_V_1_vld_in = ap_const_logic_0) and (features_out_V_1_ack_out = ap_const_logic_1)))) then 
                    features_out_V_1_state <= ap_const_lv2_2;
                elsif ((((features_out_V_1_state = ap_const_lv2_1) and (features_out_V_TREADY = ap_const_logic_0)) or ((features_out_V_1_state = ap_const_lv2_3) and (features_out_V_TREADY = ap_const_logic_0) and (features_out_V_1_vld_in = ap_const_logic_1)))) then 
                    features_out_V_1_state <= ap_const_lv2_1;
                elsif (((not(((features_out_V_1_vld_in = ap_const_logic_0) and (features_out_V_1_ack_out = ap_const_logic_1))) and not(((features_out_V_TREADY = ap_const_logic_0) and (features_out_V_1_vld_in = ap_const_logic_1))) and (features_out_V_1_state = ap_const_lv2_3)) or ((features_out_V_1_state = ap_const_lv2_1) and (features_out_V_1_ack_out = ap_const_logic_1)) or ((features_out_V_1_state = ap_const_lv2_2) and (features_out_V_1_vld_in = ap_const_logic_1)))) then 
                    features_out_V_1_state <= ap_const_lv2_3;
                else 
                    features_out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln108_fu_426_p2 = ap_const_lv1_0) and (normalized_in_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln108_fu_426_p2 = ap_const_lv1_1))) then 
                i1_0_reg_239 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i1_0_reg_239 <= i_1_reg_959;
            end if; 
        end if;
    end process;

    i2_0_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln114_fu_443_p2 = ap_const_lv1_1))) then 
                i2_0_reg_262 <= ap_const_lv8_64;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i2_0_reg_262 <= i_2_reg_1002;
            end if; 
        end if;
    end process;

    i3_0_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln123_fu_469_p2 = ap_const_lv1_1))) then 
                i3_0_reg_298 <= ap_const_lv7_14;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i3_0_reg_298 <= i_3_reg_1050;
            end if; 
        end if;
    end process;

    i4_0_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                i4_0_reg_309 <= i_4_reg_1095;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln129_fu_721_p2 = ap_const_lv1_1))) then 
                i4_0_reg_309 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln108_fu_426_p2 = ap_const_lv1_0) and (normalized_in_V_empty_n = ap_const_logic_0))) and (icmp_ln108_fu_426_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_228 <= i_fu_432_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_228 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_012_0_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln123_fu_469_p2 = ap_const_lv1_1))) then 
                p_012_0_reg_286 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                p_012_0_reg_286 <= aip_1_fu_879_p3;
            end if; 
        end if;
    end process;

    p_014_0_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln123_fu_469_p2 = ap_const_lv1_1))) then 
                p_014_0_reg_274 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                p_014_0_reg_274 <= slope_ip_2_fu_872_p3;
            end if; 
        end if;
    end process;

    p_0_0_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                p_0_0_reg_321 <= grp_fu_333_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln129_fu_721_p2 = ap_const_lv1_1))) then 
                p_0_0_reg_321 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                reg_384 <= buffer_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_384 <= buffer_q0;
            end if; 
        end if;
    end process;

    reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_391 <= buffer_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_391 <= buffer_q1;
            end if; 
        end if;
    end process;

    x_assign_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln114_fu_443_p2 = ap_const_lv1_1))) then 
                x_assign_reg_250 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                x_assign_reg_250 <= tdia_1_fu_714_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                and_ln124_1_reg_1027 <= and_ln124_1_fu_708_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((features_out_V_1_load_A = ap_const_logic_1)) then
                features_out_V_1_payload_A <= features_out_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((features_out_V_1_load_B = ap_const_logic_1)) then
                features_out_V_1_payload_B <= features_out_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_959 <= i_1_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_2_reg_1002 <= i_2_fu_628_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_721_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                i_3_reg_1050 <= i_3_fu_733_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                i_4_reg_1095 <= i_4_fu_932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                icmp_ln124_1_reg_1012 <= icmp_ln124_1_fu_676_p2;
                icmp_ln124_2_reg_1017 <= icmp_ln124_2_fu_682_p2;
                icmp_ln124_3_reg_1022 <= icmp_ln124_3_fu_688_p2;
                icmp_ln124_reg_1007 <= icmp_ln124_fu_670_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                icmp_ln138_1_reg_1087 <= icmp_ln138_1_fu_911_p2;
                icmp_ln138_reg_1082 <= icmp_ln138_fu_905_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln129_fu_721_p2 = ap_const_lv1_1))) then
                or_ln138_1_reg_1060 <= or_ln138_1_fu_783_p2;
                slope_ip_reg_1055 <= slope_ip_fu_749_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_Val2_12_reg_987 <= p_Val2_12_fu_611_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then
                reg_398 <= grp_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = and_ln124_1_reg_1027)))) then
                reg_405 <= grp_fu_348_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then
                reg_410 <= grp_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45))) then
                reg_416 <= grp_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                slope_ip_1_reg_1065 <= diff1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                tmp_10_reg_1130 <= grp_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                tmp_11_reg_1135 <= grp_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                tmp_2_reg_1125 <= grp_fu_356_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                tmp_5_reg_1115 <= grp_fu_356_p1;
                tmp_9_reg_1120 <= grp_fu_359_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_443_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln115_1_reg_969(7 downto 0) <= zext_ln115_1_fu_460_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    zext_ln123_reg_979(7 downto 0) <= zext_ln123_fu_465_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln115_1_reg_969(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln123_reg_979(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, normalized_in_V_empty_n, features_out_V_TREADY, features_out_V_1_ack_in, features_out_V_1_state, ap_CS_fsm_state2, icmp_ln108_fu_426_p2, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state3, icmp_ln114_fu_443_p2, ap_CS_fsm_state10, icmp_ln123_fu_469_p2, ap_CS_fsm_state19, icmp_ln129_fu_721_p2, ap_CS_fsm_state27, and_ln138_1_fu_926_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln108_fu_426_p2 = ap_const_lv1_0) and (normalized_in_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln108_fu_426_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((icmp_ln108_fu_426_p2 = ap_const_lv1_0) and (normalized_in_V_empty_n = ap_const_logic_0))) and (icmp_ln108_fu_426_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln114_fu_443_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln123_fu_469_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln129_fu_721_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_lv1_0 = and_ln138_1_fu_926_p2) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if ((not(((features_out_V_1_state = ap_const_lv2_1) or (features_out_V_1_ack_in = ap_const_logic_0) or ((features_out_V_1_state = ap_const_lv2_3) and (features_out_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln339_fu_519_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_515_p1));
    aip_1_fu_879_p3 <= 
        reg_384 when (and_ln130_1_fu_866_p2(0) = '1') else 
        p_012_0_reg_286;
    and_ln124_1_fu_708_p2 <= (grp_fu_363_p2 and and_ln124_fu_702_p2);
    and_ln124_fu_702_p2 <= (or_ln124_fu_694_p2 and or_ln124_1_fu_698_p2);
    and_ln130_1_fu_866_p2 <= (grp_fu_363_p2 and and_ln130_fu_860_p2);
    and_ln130_fu_860_p2 <= (or_ln130_fu_836_p2 and or_ln130_1_fu_854_p2);
    and_ln138_1_fu_926_p2 <= (grp_fu_363_p2 and and_ln138_fu_921_p2);
    and_ln138_fu_921_p2 <= (or_ln138_fu_917_p2 and or_ln138_1_reg_1060);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(normalized_in_V_empty_n, icmp_ln108_fu_426_p2)
    begin
                ap_block_state2 <= ((icmp_ln108_fu_426_p2 = ap_const_lv1_0) and (normalized_in_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state53_assign_proc : process(features_out_V_TREADY, features_out_V_1_state)
    begin
                ap_block_state53 <= ((features_out_V_1_state = ap_const_lv2_1) or ((features_out_V_1_state = ap_const_lv2_3) and (features_out_V_TREADY = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, features_out_V_TREADY, features_out_V_1_ack_in, features_out_V_1_state, ap_CS_fsm_state53)
    begin
        if ((not(((features_out_V_1_state = ap_const_lv2_1) or (features_out_V_1_ack_in = ap_const_logic_0) or ((features_out_V_1_state = ap_const_lv2_3) and (features_out_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(features_out_V_TREADY, features_out_V_1_ack_in, features_out_V_1_state, ap_CS_fsm_state53)
    begin
        if ((not(((features_out_V_1_state = ap_const_lv2_1) or (features_out_V_1_ack_in = ap_const_logic_0) or ((features_out_V_1_state = ap_const_lv2_3) and (features_out_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln124_1_fu_652_p1 <= buffer_q0;
    bitcast_ln124_fu_634_p1 <= buffer_q1;
    bitcast_ln130_1_fu_806_p1 <= p_014_0_reg_274;
    bitcast_ln130_fu_789_p1 <= slope_ip_1_reg_1065;
    bitcast_ln135_fu_739_p1 <= p_014_0_reg_274;
    bitcast_ln138_1_fu_753_p1 <= x_assign_reg_250;
    bitcast_ln138_fu_887_p1 <= reg_405;

    buffer_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state27, zext_ln109_fu_438_p1, zext_ln115_fu_455_p1, sext_ln124_fu_624_p1, sext_ln139_fu_938_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            buffer_address0 <= sext_ln139_fu_938_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buffer_address0 <= sext_ln124_fu_624_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_address0 <= zext_ln115_fu_455_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_address0 <= zext_ln109_fu_438_p1(8 - 1 downto 0);
        else 
            buffer_address0 <= "XXXXXXXX";
        end if; 
    end process;


    buffer_address1_assign_proc : process(ap_CS_fsm_state3, zext_ln115_1_fu_460_p1, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state27, zext_ln124_fu_619_p1, zext_ln130_fu_727_p1, sext_ln139_1_fu_943_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            buffer_address1 <= sext_ln139_1_fu_943_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buffer_address1 <= zext_ln130_fu_727_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buffer_address1 <= zext_ln124_fu_619_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_address1 <= zext_ln115_1_fu_460_p1(8 - 1 downto 0);
        else 
            buffer_address1 <= "XXXXXXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(normalized_in_V_empty_n, ap_CS_fsm_state2, icmp_ln108_fu_426_p2, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((icmp_ln108_fu_426_p2 = ap_const_lv1_0) and (normalized_in_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            buffer_ce0 <= ap_const_logic_1;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            buffer_ce1 <= ap_const_logic_1;
        else 
            buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_we0_assign_proc : process(normalized_in_V_empty_n, ap_CS_fsm_state2, icmp_ln108_fu_426_p2)
    begin
        if ((not(((icmp_ln108_fu_426_p2 = ap_const_lv1_0) and (normalized_in_V_empty_n = ap_const_logic_0))) and (icmp_ln108_fu_426_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            buffer_we0 <= ap_const_logic_1;
        else 
            buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    diff1_address0_assign_proc : process(zext_ln115_1_reg_969, ap_CS_fsm_state19, ap_CS_fsm_state9, zext_ln130_fu_727_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            diff1_address0 <= zext_ln130_fu_727_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            diff1_address0 <= zext_ln115_1_reg_969(8 - 1 downto 0);
        else 
            diff1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    diff1_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            diff1_ce0 <= ap_const_logic_1;
        else 
            diff1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    diff1_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            diff1_we0 <= ap_const_logic_1;
        else 
            diff1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    features_out_V_1_ack_in <= features_out_V_1_state(1);
    features_out_V_1_ack_out <= features_out_V_TREADY;

    features_out_V_1_data_in_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state47, ap_CS_fsm_state51, ap_CS_fsm_state52, grp_fu_340_p2, grp_fu_352_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            features_out_V_1_data_in <= grp_fu_352_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            features_out_V_1_data_in <= grp_fu_340_p2;
        else 
            features_out_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    features_out_V_1_data_out_assign_proc : process(features_out_V_1_payload_A, features_out_V_1_payload_B, features_out_V_1_sel)
    begin
        if ((features_out_V_1_sel = ap_const_logic_1)) then 
            features_out_V_1_data_out <= features_out_V_1_payload_B;
        else 
            features_out_V_1_data_out <= features_out_V_1_payload_A;
        end if; 
    end process;

    features_out_V_1_load_A <= (features_out_V_1_state_cmp_full and not(features_out_V_1_sel_wr));
    features_out_V_1_load_B <= (features_out_V_1_state_cmp_full and features_out_V_1_sel_wr);
    features_out_V_1_sel <= features_out_V_1_sel_rd;
    features_out_V_1_state_cmp_full <= '0' when (features_out_V_1_state = ap_const_lv2_1) else '1';

    features_out_V_1_vld_in_assign_proc : process(features_out_V_1_ack_in, ap_CS_fsm_state41, ap_CS_fsm_state47, ap_CS_fsm_state51, ap_CS_fsm_state52)
    begin
        if ((((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
            features_out_V_1_vld_in <= ap_const_logic_1;
        else 
            features_out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    features_out_V_1_vld_out <= features_out_V_1_state(0);
    features_out_V_TDATA <= features_out_V_1_data_out;

    features_out_V_TDATA_blk_n_assign_proc : process(features_out_V_1_state, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            features_out_V_TDATA_blk_n <= features_out_V_1_state(1);
        else 
            features_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    features_out_V_TVALID <= features_out_V_1_state(0);

    grp_fu_333_ce_assign_proc : process(features_out_V_1_ack_in, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state8, ap_CS_fsm_state32, ap_CS_fsm_state27, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state5, ap_CS_fsm_state29, ap_CS_fsm_state36, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
            grp_fu_333_ce <= ap_const_logic_1;
        else 
            grp_fu_333_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_333_opcode_assign_proc : process(ap_CS_fsm_state27, and_ln138_1_fu_926_p2, ap_CS_fsm_state5, ap_CS_fsm_state29, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_333_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_lv1_0 = and_ln138_1_fu_926_p2) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            grp_fu_333_opcode <= ap_const_lv2_0;
        else 
            grp_fu_333_opcode <= "XX";
        end if; 
    end process;


    grp_fu_333_p0_assign_proc : process(reg_384, ap_CS_fsm_state27, x_assign_reg_250, p_0_0_reg_321, ap_CS_fsm_state5, ap_CS_fsm_state29, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_333_p0 <= p_0_0_reg_321;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_333_p0 <= x_assign_reg_250;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_333_p0 <= reg_384;
        else 
            grp_fu_333_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_333_p1_assign_proc : process(reg_391, reg_410, ap_CS_fsm_state27, ap_CS_fsm_state5, ap_CS_fsm_state29, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_333_p1 <= reg_410;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_333_p1 <= ap_const_lv32_C2CA0000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_333_p1 <= reg_391;
        else 
            grp_fu_333_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_340_ce_assign_proc : process(features_out_V_1_ack_in, ap_CS_fsm_state41, ap_CS_fsm_state35, ap_CS_fsm_state27, ap_CS_fsm_state40, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state35) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
            grp_fu_340_ce <= ap_const_logic_1;
        else 
            grp_fu_340_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_340_p0_assign_proc : process(reg_398, ap_CS_fsm_state27, p_012_0_reg_286, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_340_p0 <= reg_398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_340_p0 <= p_012_0_reg_286;
        else 
            grp_fu_340_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_340_p1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_340_p1 <= ap_const_lv32_3F000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_340_p1 <= ap_const_lv32_40800000;
        else 
            grp_fu_340_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_348_p0_assign_proc : process(zext_ln123_reg_979, i4_0_reg_309, ap_CS_fsm_state14, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_348_p0 <= i4_0_reg_309;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_348_p0 <= zext_ln123_reg_979;
        else 
            grp_fu_348_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_352_ce_assign_proc : process(features_out_V_1_ack_in, ap_CS_fsm_state47, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state50, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state50) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47)))) then 
            grp_fu_352_ce <= ap_const_logic_1;
        else 
            grp_fu_352_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_352_p0_assign_proc : process(ap_CS_fsm_state51, reg_416, tmp_11_reg_1135, ap_CS_fsm_state50, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_352_p0 <= tmp_11_reg_1135;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            grp_fu_352_p0 <= reg_416;
        else 
            grp_fu_352_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_356_p0_assign_proc : process(reg_398, slope_ip_reg_1055, ap_CS_fsm_state27, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_356_p0 <= reg_398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_356_p0 <= slope_ip_reg_1055;
        else 
            grp_fu_356_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_363_opcode_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_363_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_363_opcode <= ap_const_lv5_2;
        else 
            grp_fu_363_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_363_p0_assign_proc : process(buffer_q1, ap_CS_fsm_state12, ap_CS_fsm_state20, reg_405, diff1_q0, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_363_p0 <= reg_405;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_363_p0 <= diff1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_363_p0 <= buffer_q1;
        else 
            grp_fu_363_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_363_p1_assign_proc : process(buffer_q0, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state26, x_assign_reg_250, p_014_0_reg_274)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_363_p1 <= x_assign_reg_250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_363_p1 <= p_014_0_reg_274;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_363_p1 <= buffer_q0;
        else 
            grp_fu_363_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_372_ce_assign_proc : process(features_out_V_1_ack_in, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state45, ap_CS_fsm_state44, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state45) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
            grp_fu_372_ce <= ap_const_logic_1;
        else 
            grp_fu_372_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_377_ce_assign_proc : process(features_out_V_1_ack_in, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state45, ap_CS_fsm_state49, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state46, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state45) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47)) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((features_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
            grp_fu_377_ce <= ap_const_logic_1;
        else 
            grp_fu_377_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_377_p0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state45, tmp_5_reg_1115, tmp_2_reg_1125, tmp_10_reg_1130, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_377_p0 <= tmp_10_reg_1130;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_377_p0 <= tmp_2_reg_1125;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_377_p0 <= tmp_5_reg_1115;
        else 
            grp_fu_377_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_377_p1_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_377_p1 <= ap_const_lv64_3FA999999999999A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_377_p1 <= ap_const_lv64_3F847AE147AE147B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_377_p1 <= ap_const_lv64_405B189BF162AE4B;
        else 
            grp_fu_377_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_449_p2 <= std_logic_vector(unsigned(i1_0_reg_239) + unsigned(ap_const_lv8_1));
    i_2_fu_628_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(i2_0_reg_262));
    i_3_fu_733_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(i3_0_reg_298));
    i_4_fu_932_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i4_0_reg_309));
    i_fu_432_p2 <= std_logic_vector(unsigned(i_0_reg_228) + unsigned(ap_const_lv8_1));
    icmp_ln108_fu_426_p2 <= "1" when (i_0_reg_228 = ap_const_lv8_C8) else "0";
    icmp_ln114_fu_443_p2 <= "1" when (i1_0_reg_239 = ap_const_lv8_C7) else "0";
    icmp_ln123_fu_469_p2 <= "1" when (i2_0_reg_262 = ap_const_lv8_C8) else "0";
    icmp_ln124_1_fu_676_p2 <= "1" when (trunc_ln124_fu_648_p1 = ap_const_lv23_0) else "0";
    icmp_ln124_2_fu_682_p2 <= "0" when (tmp_13_fu_656_p4 = ap_const_lv8_FF) else "1";
    icmp_ln124_3_fu_688_p2 <= "1" when (trunc_ln124_1_fu_666_p1 = ap_const_lv23_0) else "0";
    icmp_ln124_fu_670_p2 <= "0" when (tmp_12_fu_638_p4 = ap_const_lv8_FF) else "1";
    icmp_ln129_fu_721_p2 <= "1" when (i3_0_reg_298 = ap_const_lv7_63) else "0";
    icmp_ln130_1_fu_830_p2 <= "1" when (trunc_ln130_fu_802_p1 = ap_const_lv23_0) else "0";
    icmp_ln130_2_fu_842_p2 <= "0" when (tmp_18_fu_810_p4 = ap_const_lv8_FF) else "1";
    icmp_ln130_3_fu_848_p2 <= "1" when (trunc_ln130_1_fu_820_p1 = ap_const_lv23_0) else "0";
    icmp_ln130_fu_824_p2 <= "0" when (tmp_17_fu_792_p4 = ap_const_lv8_FF) else "1";
    icmp_ln138_1_fu_911_p2 <= "1" when (trunc_ln138_1_fu_901_p1 = ap_const_lv23_0) else "0";
    icmp_ln138_2_fu_771_p2 <= "0" when (tmp_16_fu_757_p4 = ap_const_lv8_FF) else "1";
    icmp_ln138_3_fu_777_p2 <= "1" when (trunc_ln138_fu_767_p1 = ap_const_lv23_0) else "0";
    icmp_ln138_fu_905_p2 <= "0" when (tmp_20_fu_891_p4 = ap_const_lv8_FF) else "1";
    isNeg_fu_525_p3 <= add_ln339_fu_519_p2(8 downto 8);
    mantissa_V_fu_501_p4 <= ((ap_const_lv1_1 & tmp_V_9_fu_497_p1) & ap_const_lv1_0);

    normalized_in_V_blk_n_assign_proc : process(normalized_in_V_empty_n, ap_CS_fsm_state2, icmp_ln108_fu_426_p2)
    begin
        if (((icmp_ln108_fu_426_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            normalized_in_V_blk_n <= normalized_in_V_empty_n;
        else 
            normalized_in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    normalized_in_V_read_assign_proc : process(normalized_in_V_empty_n, ap_CS_fsm_state2, icmp_ln108_fu_426_p2)
    begin
        if ((not(((icmp_ln108_fu_426_p2 = ap_const_lv1_0) and (normalized_in_V_empty_n = ap_const_logic_0))) and (icmp_ln108_fu_426_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            normalized_in_V_read <= ap_const_logic_1;
        else 
            normalized_in_V_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln124_1_fu_698_p2 <= (icmp_ln124_3_reg_1022 or icmp_ln124_2_reg_1017);
    or_ln124_fu_694_p2 <= (icmp_ln124_reg_1007 or icmp_ln124_1_reg_1012);
    or_ln130_1_fu_854_p2 <= (icmp_ln130_3_fu_848_p2 or icmp_ln130_2_fu_842_p2);
    or_ln130_fu_836_p2 <= (icmp_ln130_fu_824_p2 or icmp_ln130_1_fu_830_p2);
    or_ln138_1_fu_783_p2 <= (icmp_ln138_3_fu_777_p2 or icmp_ln138_2_fu_771_p2);
    or_ln138_fu_917_p2 <= (icmp_ln138_reg_1082 or icmp_ln138_1_reg_1087);
    p_Result_s_fu_479_p3 <= p_Val2_s_fu_475_p1(31 downto 31);
    p_Val2_11_fu_597_p3 <= 
        zext_ln662_fu_583_p1 when (isNeg_fu_525_p3(0) = '1') else 
        tmp_15_fu_587_p4;
    p_Val2_12_fu_611_p3 <= 
        result_V_2_fu_605_p2 when (p_Result_s_fu_479_p3(0) = '1') else 
        p_Val2_11_fu_597_p3;
    p_Val2_s_fu_475_p1 <= x_assign_reg_250;
    r_V_2_fu_569_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_511_p1),to_integer(unsigned('0' & zext_ln1287_fu_559_p1(31-1 downto 0)))));
    r_V_fu_563_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_501_p4),to_integer(unsigned('0' & sext_ln1311_3_fu_555_p1(25-1 downto 0)))));
    result_V_2_fu_605_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_11_fu_597_p3));
        sext_ln124_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_12_reg_987),64));

        sext_ln1311_2_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_543_p3),32));

        sext_ln1311_3_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_543_p3),25));

        sext_ln1311_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_533_p2),9));

        sext_ln139_1_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_4_fu_932_p2),64));

        sext_ln139_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i4_0_reg_309),64));

    slope_ip_2_fu_872_p3 <= 
        slope_ip_1_reg_1065 when (and_ln130_1_fu_866_p2(0) = '1') else 
        p_014_0_reg_274;
    slope_ip_fu_749_p1 <= xor_ln135_fu_743_p2;
    sub_ln1311_fu_533_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_487_p4));
    tdia_1_fu_714_p3 <= 
        reg_405 when (and_ln124_1_reg_1027(0) = '1') else 
        x_assign_reg_250;
    tmp_12_fu_638_p4 <= bitcast_ln124_fu_634_p1(30 downto 23);
    tmp_13_fu_656_p4 <= bitcast_ln124_1_fu_652_p1(30 downto 23);
    tmp_15_fu_587_p4 <= r_V_2_fu_569_p2(55 downto 24);
    tmp_16_fu_757_p4 <= bitcast_ln138_1_fu_753_p1(30 downto 23);
    tmp_17_fu_792_p4 <= bitcast_ln130_fu_789_p1(30 downto 23);
    tmp_18_fu_810_p4 <= bitcast_ln130_1_fu_806_p1(30 downto 23);
    tmp_20_fu_891_p4 <= bitcast_ln138_fu_887_p1(30 downto 23);
    tmp_25_fu_575_p3 <= r_V_fu_563_p2(24 downto 24);
    tmp_V_9_fu_497_p1 <= p_Val2_s_fu_475_p1(23 - 1 downto 0);
    tmp_V_fu_487_p4 <= p_Val2_s_fu_475_p1(30 downto 23);
    trunc_ln124_1_fu_666_p1 <= bitcast_ln124_1_fu_652_p1(23 - 1 downto 0);
    trunc_ln124_fu_648_p1 <= bitcast_ln124_fu_634_p1(23 - 1 downto 0);
    trunc_ln130_1_fu_820_p1 <= bitcast_ln130_1_fu_806_p1(23 - 1 downto 0);
    trunc_ln130_fu_802_p1 <= bitcast_ln130_fu_789_p1(23 - 1 downto 0);
    trunc_ln138_1_fu_901_p1 <= bitcast_ln138_fu_887_p1(23 - 1 downto 0);
    trunc_ln138_fu_767_p1 <= bitcast_ln138_1_fu_753_p1(23 - 1 downto 0);
    ush_fu_543_p3 <= 
        sext_ln1311_fu_539_p1 when (isNeg_fu_525_p3(0) = '1') else 
        add_ln339_fu_519_p2;
    xor_ln135_fu_743_p2 <= (bitcast_ln135_fu_739_p1 xor ap_const_lv32_80000000);
    zext_ln109_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_228),64));
    zext_ln115_1_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_239),64));
    zext_ln115_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_449_p2),64));
    zext_ln123_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_262),32));
    zext_ln124_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_262),64));
    zext_ln1287_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_2_fu_551_p1),79));
    zext_ln130_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_298),64));
    zext_ln339_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_487_p4),9));
    zext_ln662_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_575_p3),32));
    zext_ln682_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_501_p4),79));
end behav;
