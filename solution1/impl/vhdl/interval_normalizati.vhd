-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity interval_normalizati is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    peaks_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    peaks_V_V_empty_n : IN STD_LOGIC;
    peaks_V_V_read : OUT STD_LOGIC;
    normalized_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    normalized_out_V_full_n : IN STD_LOGIC;
    normalized_out_V_write : OUT STD_LOGIC );
end;


architecture behav of interval_normalizati is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_43480000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011010010000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv11_200 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_const_lv12_FA : STD_LOGIC_VECTOR (11 downto 0) := "000011111010";
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv33_200 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal peaks_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_nbreadreq_fu_120_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal normalized_out_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_V_load_reg_596 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_V_6_reg_601 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln895_fu_265_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln895_reg_606 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln79_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_611 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln86_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_8_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln87_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln87_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln85_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_fu_297_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_638 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal p_Val2_6_fu_442_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal idx_0_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_0_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_14_reg_661 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal trunc_ln1372_fu_476_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1372_reg_666 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1372_2_fu_480_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1372_2_reg_671 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1372_3_fu_502_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1372_3_reg_681 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1372_4_fu_506_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1372_4_reg_686 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal buf_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v0_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_buffer_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal buf_buffer_ce0 : STD_LOGIC;
    signal buf_buffer_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal buf_buffer_ce1 : STD_LOGIC;
    signal i_0_reg_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln544_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln544_1_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_fu_112 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln85_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_175_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_183_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_192_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_227_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_fu_231_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_fu_235_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln75_fu_249_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln75_fu_255_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln75_fu_245_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln895_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln71_fu_241_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal interval_len_fu_259_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_fu_307_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_8_fu_328_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_332_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_7_fu_318_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_346_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_350_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_364_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_356_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_370_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_374_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_382_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_386_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_342_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_390_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_394_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_13_fu_406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_400_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_418_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_428_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_310_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_1_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_fu_459_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_4_fu_462_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal idx_1_fu_454_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_2_fu_484_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_6_fu_488_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1372_fu_510_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_515_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1372_2_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_5_fu_536_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1372_3_fu_548_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_553_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1372_4_fu_561_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_567_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_7_fu_574_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);

    component feature_extractoreOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component feature_extractorfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component feature_extractorg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component feature_extractorhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component feature_extractoribs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component interval_normalizdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buf_buffer_U : component interval_normalizdEe
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_buffer_address0,
        ce0 => buf_buffer_ce0,
        q0 => buf_buffer_q0,
        address1 => buf_buffer_address1,
        ce1 => buf_buffer_ce1,
        q1 => buf_buffer_q1);

    feature_extractoreOg_U7 : component feature_extractoreOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_175_p0,
        din1 => grp_fu_175_p1,
        opcode => grp_fu_175_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_175_p2);

    feature_extractorfYi_U8 : component feature_extractorfYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pos_reg_643,
        din1 => reg_195,
        ce => ap_const_logic_1,
        dout => grp_fu_179_p2);

    feature_extractorg8j_U9 : component feature_extractorg8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_183_p0,
        din1 => grp_fu_183_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_183_p2);

    feature_extractorhbi_U10 : component feature_extractorhbi
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_201,
        din1 => ap_const_lv32_43480000,
        ce => ap_const_logic_1,
        dout => grp_fu_187_p2);

    feature_extractoribs_U11 : component feature_extractoribs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_192_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_192_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((tmp_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (peaks_V_V_empty_n = ap_const_logic_0))) and (tmp_nbreadreq_fu_120_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_reg_164 <= ap_const_lv8_0;
            elsif (((normalized_out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                i_0_reg_164 <= i_reg_638;
            end if; 
        end if;
    end process;

    tmp_V_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_291_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln79_reg_611 = ap_const_lv1_0))) then 
                tmp_V_fu_112 <= tmp_V_6_reg_601;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_V_fu_112 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln79_reg_611 = ap_const_lv1_0))) then
                i_reg_638 <= i_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (peaks_V_V_empty_n = ap_const_logic_0))) and (tmp_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln79_reg_611 <= icmp_ln79_fu_273_p2;
                select_ln895_reg_606 <= select_ln895_fu_265_p3;
                tmp_V_6_reg_601 <= peaks_V_V_dout;
                tmp_V_load_reg_596 <= tmp_V_fu_112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                idx_0_reg_655 <= idx_0_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                p_Val2_6_reg_649 <= p_Val2_6_fu_442_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                pos_reg_643 <= grp_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_195 <= grp_fu_192_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_201 <= grp_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state34))) then
                reg_207 <= grp_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_14_reg_661 <= ret_V_4_fu_462_p2(32 downto 32);
                tmp_16_reg_676 <= ret_V_6_fu_488_p2(32 downto 32);
                trunc_ln1372_2_reg_671 <= trunc_ln1372_2_fu_480_p1;
                trunc_ln1372_3_reg_681 <= trunc_ln1372_3_fu_502_p1;
                trunc_ln1372_4_reg_686 <= trunc_ln1372_4_fu_506_p1;
                trunc_ln1372_reg_666 <= trunc_ln1372_fu_476_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                tmp_4_reg_712 <= grp_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_8_reg_620 <= grp_fu_192_p1;
                    zext_ln87_reg_625(9 downto 0) <= zext_ln87_fu_283_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                v0_reg_701 <= buf_buffer_q0;
                v1_reg_707 <= buf_buffer_q1;
            end if;
        end if;
    end process;
    zext_ln87_reg_625(31 downto 10) <= "0000000000000000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, peaks_V_V_empty_n, normalized_out_V_full_n, ap_CS_fsm_state2, tmp_nbreadreq_fu_120_p3, ap_CS_fsm_state42, icmp_ln79_fu_273_p2, icmp_ln79_reg_611, ap_CS_fsm_state7, icmp_ln85_fu_291_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((tmp_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (peaks_V_V_empty_n = ap_const_logic_0))) and (tmp_nbreadreq_fu_120_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((tmp_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (peaks_V_V_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_273_p2 = ap_const_lv1_1) and (tmp_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((tmp_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (peaks_V_V_empty_n = ap_const_logic_0))) and (tmp_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln79_fu_273_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((icmp_ln85_fu_291_p2 = ap_const_lv1_1) or (icmp_ln79_reg_611 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((normalized_out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln339_fu_350_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_346_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(peaks_V_V_empty_n, tmp_nbreadreq_fu_120_p3)
    begin
                ap_block_state2 <= ((tmp_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (peaks_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, peaks_V_V_empty_n, ap_CS_fsm_state2, tmp_nbreadreq_fu_120_p3)
    begin
        if ((not(((tmp_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (peaks_V_V_empty_n = ap_const_logic_0))) and (tmp_nbreadreq_fu_120_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    buf_buffer_address0 <= sext_ln544_fu_543_p1(9 - 1 downto 0);
    buf_buffer_address1 <= sext_ln544_1_fu_581_p1(9 - 1 downto 0);

    buf_buffer_ce0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            buf_buffer_ce0 <= ap_const_logic_1;
        else 
            buf_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_buffer_ce1_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            buf_buffer_ce1 <= ap_const_logic_1;
        else 
            buf_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_175_opcode_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_175_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_175_opcode <= ap_const_lv2_0;
        else 
            grp_fu_175_opcode <= "XX";
        end if; 
    end process;


    grp_fu_175_p0_assign_proc : process(v0_reg_701, v1_reg_707, ap_CS_fsm_state31, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_175_p0 <= v0_reg_701;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_175_p0 <= v1_reg_707;
        else 
            grp_fu_175_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_175_p1_assign_proc : process(reg_201, v0_reg_701, ap_CS_fsm_state31, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_175_p1 <= reg_201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_175_p1 <= v0_reg_701;
        else 
            grp_fu_175_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_183_p0_assign_proc : process(reg_207, tmp_8_reg_620, ap_CS_fsm_state11, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_183_p0 <= reg_207;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_183_p0 <= tmp_8_reg_620;
        else 
            grp_fu_183_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_183_p1_assign_proc : process(reg_195, tmp_4_reg_712, ap_CS_fsm_state11, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_183_p1 <= tmp_4_reg_712;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_183_p1 <= reg_195;
        else 
            grp_fu_183_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_192_p0_assign_proc : process(sext_ln86_fu_279_p1, ap_CS_fsm_state3, zext_ln85_fu_286_p1, ap_CS_fsm_state7, p_Val2_6_reg_649, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_192_p0 <= p_Val2_6_reg_649;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_192_p0 <= zext_ln85_fu_286_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_192_p0 <= sext_ln86_fu_279_p1;
        else 
            grp_fu_192_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_297_p2 <= std_logic_vector(unsigned(i_0_reg_164) + unsigned(ap_const_lv8_1));
    icmp_ln79_fu_273_p2 <= "1" when (signed(select_ln895_fu_265_p3) > signed(ap_const_lv12_FA)) else "0";
    icmp_ln85_fu_291_p2 <= "1" when (i_0_reg_164 = ap_const_lv8_C8) else "0";
    icmp_ln895_fu_221_p2 <= "1" when (unsigned(peaks_V_V_dout) > unsigned(tmp_V_fu_112)) else "0";
    idx_0_fu_450_p2 <= std_logic_vector(unsigned(zext_ln87_reg_625) + unsigned(p_Val2_6_reg_649));
    idx_1_fu_454_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(idx_0_reg_655));

    internal_ap_ready_assign_proc : process(peaks_V_V_empty_n, ap_CS_fsm_state2, tmp_nbreadreq_fu_120_p3)
    begin
        if ((not(((tmp_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (peaks_V_V_empty_n = ap_const_logic_0))) and (tmp_nbreadreq_fu_120_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    interval_len_fu_259_p2 <= std_logic_vector(signed(sext_ln75_fu_255_p1) + signed(zext_ln75_fu_245_p1));
    isNeg_fu_356_p3 <= add_ln339_fu_350_p2(8 downto 8);
    lhs_V_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(peaks_V_V_dout),11));
    mantissa_V_fu_332_p4 <= ((ap_const_lv1_1 & tmp_V_8_fu_328_p1) & ap_const_lv1_0);

    normalized_out_V_blk_n_assign_proc : process(normalized_out_V_full_n, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            normalized_out_V_blk_n <= normalized_out_V_full_n;
        else 
            normalized_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    normalized_out_V_din <= reg_207;

    normalized_out_V_write_assign_proc : process(normalized_out_V_full_n, ap_CS_fsm_state42)
    begin
        if (((normalized_out_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            normalized_out_V_write <= ap_const_logic_1;
        else 
            normalized_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_310_p3 <= p_Val2_s_fu_307_p1(31 downto 31);
    p_Val2_5_fu_428_p3 <= 
        zext_ln662_fu_414_p1 when (isNeg_fu_356_p3(0) = '1') else 
        tmp_2_fu_418_p4;
    p_Val2_6_fu_442_p3 <= 
        result_V_1_fu_436_p2 when (p_Result_s_fu_310_p3(0) = '1') else 
        p_Val2_5_fu_428_p3;
    p_Val2_s_fu_307_p1 <= pos_reg_643;

    peaks_V_V_blk_n_assign_proc : process(peaks_V_V_empty_n, ap_CS_fsm_state2, tmp_nbreadreq_fu_120_p3)
    begin
        if (((tmp_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            peaks_V_V_blk_n <= peaks_V_V_empty_n;
        else 
            peaks_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    peaks_V_V_read_assign_proc : process(peaks_V_V_empty_n, ap_CS_fsm_state2, tmp_nbreadreq_fu_120_p3)
    begin
        if ((not(((tmp_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (peaks_V_V_empty_n = ap_const_logic_0))) and (tmp_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            peaks_V_V_read <= ap_const_logic_1;
        else 
            peaks_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_400_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_342_p1),to_integer(unsigned('0' & zext_ln1287_fu_390_p1(31-1 downto 0)))));
    r_V_fu_394_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_332_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_386_p1(25-1 downto 0)))));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    result_V_1_fu_436_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_5_fu_428_p3));
    ret_V_4_fu_462_p2 <= std_logic_vector(unsigned(ap_const_lv33_200) - unsigned(rhs_V_1_fu_459_p1));
    ret_V_5_fu_536_p3 <= 
        sub_ln1372_2_fu_523_p2 when (tmp_14_reg_661(0) = '1') else 
        tmp_6_fu_529_p3;
    ret_V_6_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv33_200) - unsigned(rhs_V_2_fu_484_p1));
    ret_V_7_fu_574_p3 <= 
        sub_ln1372_4_fu_561_p2 when (tmp_16_reg_676(0) = '1') else 
        tmp_7_fu_567_p3;
    ret_V_fu_235_p2 <= std_logic_vector(unsigned(lhs_V_fu_227_p1) - unsigned(rhs_V_fu_231_p1));
        rhs_V_1_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(idx_0_reg_655),33));

        rhs_V_2_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(idx_1_fu_454_p2),33));

    rhs_V_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_112),11));
    select_ln895_fu_265_p3 <= 
        sext_ln71_fu_241_p1 when (icmp_ln895_fu_221_p2(0) = '1') else 
        interval_len_fu_259_p2;
        sext_ln1311_1_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_374_p3),32));

        sext_ln1311_2_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_374_p3),25));

        sext_ln1311_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_364_p2),9));

        sext_ln544_1_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_7_fu_574_p3),64));

        sext_ln544_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_5_fu_536_p3),64));

        sext_ln71_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_235_p2),12));

        sext_ln75_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln75_fu_249_p2),12));

        sext_ln86_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln895_reg_606),32));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1311_fu_364_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_7_fu_318_p4));
    sub_ln1372_2_fu_523_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_15_fu_515_p3));
    sub_ln1372_3_fu_548_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(trunc_ln1372_4_reg_686));
    sub_ln1372_4_fu_561_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_17_fu_553_p3));
    sub_ln1372_fu_510_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(trunc_ln1372_2_reg_671));
    sub_ln75_fu_249_p2 <= std_logic_vector(unsigned(ap_const_lv11_200) - unsigned(rhs_V_fu_231_p1));
    tmp_13_fu_406_p3 <= r_V_fu_394_p2(24 downto 24);
    tmp_15_fu_515_p3 <= (ap_const_lv23_0 & sub_ln1372_fu_510_p2);
    tmp_17_fu_553_p3 <= (ap_const_lv23_0 & sub_ln1372_3_fu_548_p2);
    tmp_2_fu_418_p4 <= r_V_1_fu_400_p2(55 downto 24);
    tmp_6_fu_529_p3 <= (ap_const_lv23_0 & trunc_ln1372_reg_666);
    tmp_7_fu_567_p3 <= (ap_const_lv23_0 & trunc_ln1372_3_reg_681);
    tmp_V_7_fu_318_p4 <= p_Val2_s_fu_307_p1(30 downto 23);
    tmp_V_8_fu_328_p1 <= p_Val2_s_fu_307_p1(23 - 1 downto 0);
    tmp_nbreadreq_fu_120_p3 <= (0=>(peaks_V_V_empty_n), others=>'-');
    trunc_ln1372_2_fu_480_p1 <= ret_V_4_fu_462_p2(9 - 1 downto 0);
    trunc_ln1372_3_fu_502_p1 <= ret_V_6_fu_488_p2(9 - 1 downto 0);
    trunc_ln1372_4_fu_506_p1 <= ret_V_6_fu_488_p2(9 - 1 downto 0);
    trunc_ln1372_fu_476_p1 <= ret_V_4_fu_462_p2(9 - 1 downto 0);
    ush_fu_374_p3 <= 
        sext_ln1311_fu_370_p1 when (isNeg_fu_356_p3(0) = '1') else 
        add_ln339_fu_350_p2;
    zext_ln1287_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_382_p1),79));
    zext_ln339_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_7_fu_318_p4),9));
    zext_ln662_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_406_p3),32));
    zext_ln682_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_332_p4),79));
    zext_ln75_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(peaks_V_V_dout),12));
    zext_ln85_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_164),32));
    zext_ln87_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_load_reg_596),32));
end behav;
