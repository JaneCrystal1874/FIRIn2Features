-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity feature_extractor_ip is
port (
    fir_in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    features_out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    fir_in_V_TVALID : IN STD_LOGIC;
    fir_in_V_TREADY : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    features_out_V_TVALID : OUT STD_LOGIC;
    features_out_V_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of feature_extractor_ip is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "feature_extractor_ip,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.588000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=6,HLS_SYN_DSP=26,HLS_SYN_FF=4752,HLS_SYN_LUT=8833,HLS_VERSION=2019_1}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal peak_detection_U0_ap_start : STD_LOGIC;
    signal peak_detection_U0_ap_done : STD_LOGIC;
    signal peak_detection_U0_ap_continue : STD_LOGIC;
    signal peak_detection_U0_ap_idle : STD_LOGIC;
    signal peak_detection_U0_ap_ready : STD_LOGIC;
    signal peak_detection_U0_start_out : STD_LOGIC;
    signal peak_detection_U0_start_write : STD_LOGIC;
    signal peak_detection_U0_in_V_TREADY : STD_LOGIC;
    signal peak_detection_U0_peak_loc_stream_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal peak_detection_U0_peak_loc_stream_V_V_write : STD_LOGIC;
    signal interval_normalizati_U0_ap_start : STD_LOGIC;
    signal interval_normalizati_U0_ap_done : STD_LOGIC;
    signal interval_normalizati_U0_ap_continue : STD_LOGIC;
    signal interval_normalizati_U0_ap_idle : STD_LOGIC;
    signal interval_normalizati_U0_ap_ready : STD_LOGIC;
    signal interval_normalizati_U0_start_out : STD_LOGIC;
    signal interval_normalizati_U0_start_write : STD_LOGIC;
    signal interval_normalizati_U0_peaks_V_V_read : STD_LOGIC;
    signal interval_normalizati_U0_normalized_out_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal interval_normalizati_U0_normalized_out_V_write : STD_LOGIC;
    signal compute_features_U0_ap_start : STD_LOGIC;
    signal compute_features_U0_ap_done : STD_LOGIC;
    signal compute_features_U0_ap_continue : STD_LOGIC;
    signal compute_features_U0_ap_idle : STD_LOGIC;
    signal compute_features_U0_ap_ready : STD_LOGIC;
    signal compute_features_U0_normalized_in_V_read : STD_LOGIC;
    signal compute_features_U0_features_out_V_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_features_U0_features_out_V_TVALID : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal peak_loc_stream_V_V_full_n : STD_LOGIC;
    signal peak_loc_stream_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal peak_loc_stream_V_V_empty_n : STD_LOGIC;
    signal normalized_stream_V_full_n : STD_LOGIC;
    signal normalized_stream_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal normalized_stream_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_interval_normalizati_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_interval_normalizati_U0_full_n : STD_LOGIC;
    signal start_for_interval_normalizati_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_interval_normalizati_U0_empty_n : STD_LOGIC;
    signal start_for_compute_features_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute_features_U0_full_n : STD_LOGIC;
    signal start_for_compute_features_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute_features_U0_empty_n : STD_LOGIC;
    signal compute_features_U0_start_full_n : STD_LOGIC;
    signal compute_features_U0_start_write : STD_LOGIC;

    component peak_detection IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_V_TVALID : IN STD_LOGIC;
        in_V_TREADY : OUT STD_LOGIC;
        peak_loc_stream_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        peak_loc_stream_V_V_full_n : IN STD_LOGIC;
        peak_loc_stream_V_V_write : OUT STD_LOGIC );
    end component;


    component interval_normalizati IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        peaks_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        peaks_V_V_empty_n : IN STD_LOGIC;
        peaks_V_V_read : OUT STD_LOGIC;
        normalized_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        normalized_out_V_full_n : IN STD_LOGIC;
        normalized_out_V_write : OUT STD_LOGIC );
    end component;


    component compute_features IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        normalized_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        normalized_in_V_empty_n : IN STD_LOGIC;
        normalized_in_V_read : OUT STD_LOGIC;
        features_out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        features_out_V_TVALID : OUT STD_LOGIC;
        features_out_V_TREADY : IN STD_LOGIC );
    end component;


    component fifo_w10_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_intervaqcK IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_computercU IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    peak_detection_U0 : component peak_detection
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => peak_detection_U0_ap_start,
        start_full_n => start_for_interval_normalizati_U0_full_n,
        ap_done => peak_detection_U0_ap_done,
        ap_continue => peak_detection_U0_ap_continue,
        ap_idle => peak_detection_U0_ap_idle,
        ap_ready => peak_detection_U0_ap_ready,
        start_out => peak_detection_U0_start_out,
        start_write => peak_detection_U0_start_write,
        in_V_TDATA => fir_in_V_TDATA,
        in_V_TVALID => fir_in_V_TVALID,
        in_V_TREADY => peak_detection_U0_in_V_TREADY,
        peak_loc_stream_V_V_din => peak_detection_U0_peak_loc_stream_V_V_din,
        peak_loc_stream_V_V_full_n => peak_loc_stream_V_V_full_n,
        peak_loc_stream_V_V_write => peak_detection_U0_peak_loc_stream_V_V_write);

    interval_normalizati_U0 : component interval_normalizati
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => interval_normalizati_U0_ap_start,
        start_full_n => start_for_compute_features_U0_full_n,
        ap_done => interval_normalizati_U0_ap_done,
        ap_continue => interval_normalizati_U0_ap_continue,
        ap_idle => interval_normalizati_U0_ap_idle,
        ap_ready => interval_normalizati_U0_ap_ready,
        start_out => interval_normalizati_U0_start_out,
        start_write => interval_normalizati_U0_start_write,
        peaks_V_V_dout => peak_loc_stream_V_V_dout,
        peaks_V_V_empty_n => peak_loc_stream_V_V_empty_n,
        peaks_V_V_read => interval_normalizati_U0_peaks_V_V_read,
        normalized_out_V_din => interval_normalizati_U0_normalized_out_V_din,
        normalized_out_V_full_n => normalized_stream_V_full_n,
        normalized_out_V_write => interval_normalizati_U0_normalized_out_V_write);

    compute_features_U0 : component compute_features
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => compute_features_U0_ap_start,
        ap_done => compute_features_U0_ap_done,
        ap_continue => compute_features_U0_ap_continue,
        ap_idle => compute_features_U0_ap_idle,
        ap_ready => compute_features_U0_ap_ready,
        normalized_in_V_dout => normalized_stream_V_dout,
        normalized_in_V_empty_n => normalized_stream_V_empty_n,
        normalized_in_V_read => compute_features_U0_normalized_in_V_read,
        features_out_V_TDATA => compute_features_U0_features_out_V_TDATA,
        features_out_V_TVALID => compute_features_U0_features_out_V_TVALID,
        features_out_V_TREADY => features_out_V_TREADY);

    peak_loc_stream_V_V_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => peak_detection_U0_peak_loc_stream_V_V_din,
        if_full_n => peak_loc_stream_V_V_full_n,
        if_write => peak_detection_U0_peak_loc_stream_V_V_write,
        if_dout => peak_loc_stream_V_V_dout,
        if_empty_n => peak_loc_stream_V_V_empty_n,
        if_read => interval_normalizati_U0_peaks_V_V_read);

    normalized_stream_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => interval_normalizati_U0_normalized_out_V_din,
        if_full_n => normalized_stream_V_full_n,
        if_write => interval_normalizati_U0_normalized_out_V_write,
        if_dout => normalized_stream_V_dout,
        if_empty_n => normalized_stream_V_empty_n,
        if_read => compute_features_U0_normalized_in_V_read);

    start_for_intervaqcK_U : component start_for_intervaqcK
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_interval_normalizati_U0_din,
        if_full_n => start_for_interval_normalizati_U0_full_n,
        if_write => peak_detection_U0_start_write,
        if_dout => start_for_interval_normalizati_U0_dout,
        if_empty_n => start_for_interval_normalizati_U0_empty_n,
        if_read => interval_normalizati_U0_ap_ready);

    start_for_computercU_U : component start_for_computercU
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_compute_features_U0_din,
        if_full_n => start_for_compute_features_U0_full_n,
        if_write => interval_normalizati_U0_start_write,
        if_dout => start_for_compute_features_U0_dout,
        if_empty_n => start_for_compute_features_U0_empty_n,
        if_read => compute_features_U0_ap_ready);




    ap_done <= compute_features_U0_ap_done;
    ap_idle <= (peak_detection_U0_ap_idle and interval_normalizati_U0_ap_idle and compute_features_U0_ap_idle);
    ap_ready <= peak_detection_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= compute_features_U0_ap_done;
    ap_sync_ready <= peak_detection_U0_ap_ready;
    compute_features_U0_ap_continue <= ap_const_logic_1;
    compute_features_U0_ap_start <= start_for_compute_features_U0_empty_n;
    compute_features_U0_start_full_n <= ap_const_logic_1;
    compute_features_U0_start_write <= ap_const_logic_0;
    features_out_V_TDATA <= compute_features_U0_features_out_V_TDATA;
    features_out_V_TVALID <= compute_features_U0_features_out_V_TVALID;
    fir_in_V_TREADY <= peak_detection_U0_in_V_TREADY;
    interval_normalizati_U0_ap_continue <= ap_const_logic_1;
    interval_normalizati_U0_ap_start <= start_for_interval_normalizati_U0_empty_n;
    peak_detection_U0_ap_continue <= ap_const_logic_1;
    peak_detection_U0_ap_start <= ap_start;
    start_for_compute_features_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_interval_normalizati_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
