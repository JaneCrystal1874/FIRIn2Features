// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _feature_extractor_ip_HH_
#define _feature_extractor_ip_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "peak_detection.h"
#include "interval_normalizati.h"
#include "compute_features.h"
#include "fifo_w10_d2_A.h"
#include "fifo_w32_d2_A.h"
#include "start_for_intervaqcK.h"
#include "start_for_computercU.h"

namespace ap_rtl {

struct feature_extractor_ip : public sc_module {
    // Port declarations 12
    sc_in< sc_lv<32> > fir_in_V_TDATA;
    sc_out< sc_lv<32> > features_out_V_TDATA;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > fir_in_V_TVALID;
    sc_out< sc_logic > fir_in_V_TREADY;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > features_out_V_TVALID;
    sc_in< sc_logic > features_out_V_TREADY;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    feature_extractor_ip(sc_module_name name);
    SC_HAS_PROCESS(feature_extractor_ip);

    ~feature_extractor_ip();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    peak_detection* peak_detection_U0;
    interval_normalizati* interval_normalizati_U0;
    compute_features* compute_features_U0;
    fifo_w10_d2_A* peak_loc_stream_V_V_U;
    fifo_w32_d2_A* normalized_stream_V_U;
    start_for_intervaqcK* start_for_intervaqcK_U;
    start_for_computercU* start_for_computercU_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > peak_detection_U0_ap_start;
    sc_signal< sc_logic > peak_detection_U0_ap_done;
    sc_signal< sc_logic > peak_detection_U0_ap_continue;
    sc_signal< sc_logic > peak_detection_U0_ap_idle;
    sc_signal< sc_logic > peak_detection_U0_ap_ready;
    sc_signal< sc_logic > peak_detection_U0_start_out;
    sc_signal< sc_logic > peak_detection_U0_start_write;
    sc_signal< sc_logic > peak_detection_U0_in_V_TREADY;
    sc_signal< sc_lv<10> > peak_detection_U0_peak_loc_stream_V_V_din;
    sc_signal< sc_logic > peak_detection_U0_peak_loc_stream_V_V_write;
    sc_signal< sc_logic > interval_normalizati_U0_ap_start;
    sc_signal< sc_logic > interval_normalizati_U0_ap_done;
    sc_signal< sc_logic > interval_normalizati_U0_ap_continue;
    sc_signal< sc_logic > interval_normalizati_U0_ap_idle;
    sc_signal< sc_logic > interval_normalizati_U0_ap_ready;
    sc_signal< sc_logic > interval_normalizati_U0_start_out;
    sc_signal< sc_logic > interval_normalizati_U0_start_write;
    sc_signal< sc_logic > interval_normalizati_U0_peaks_V_V_read;
    sc_signal< sc_lv<32> > interval_normalizati_U0_normalized_out_V_din;
    sc_signal< sc_logic > interval_normalizati_U0_normalized_out_V_write;
    sc_signal< sc_logic > compute_features_U0_ap_start;
    sc_signal< sc_logic > compute_features_U0_ap_done;
    sc_signal< sc_logic > compute_features_U0_ap_continue;
    sc_signal< sc_logic > compute_features_U0_ap_idle;
    sc_signal< sc_logic > compute_features_U0_ap_ready;
    sc_signal< sc_logic > compute_features_U0_normalized_in_V_read;
    sc_signal< sc_lv<32> > compute_features_U0_features_out_V_TDATA;
    sc_signal< sc_logic > compute_features_U0_features_out_V_TVALID;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > peak_loc_stream_V_V_full_n;
    sc_signal< sc_lv<10> > peak_loc_stream_V_V_dout;
    sc_signal< sc_logic > peak_loc_stream_V_V_empty_n;
    sc_signal< sc_logic > normalized_stream_V_full_n;
    sc_signal< sc_lv<32> > normalized_stream_V_dout;
    sc_signal< sc_logic > normalized_stream_V_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_interval_normalizati_U0_din;
    sc_signal< sc_logic > start_for_interval_normalizati_U0_full_n;
    sc_signal< sc_lv<1> > start_for_interval_normalizati_U0_dout;
    sc_signal< sc_logic > start_for_interval_normalizati_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_compute_features_U0_din;
    sc_signal< sc_logic > start_for_compute_features_U0_full_n;
    sc_signal< sc_lv<1> > start_for_compute_features_U0_dout;
    sc_signal< sc_logic > start_for_compute_features_U0_empty_n;
    sc_signal< sc_logic > compute_features_U0_start_full_n;
    sc_signal< sc_logic > compute_features_U0_start_write;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_compute_features_U0_ap_continue();
    void thread_compute_features_U0_ap_start();
    void thread_compute_features_U0_start_full_n();
    void thread_compute_features_U0_start_write();
    void thread_features_out_V_TDATA();
    void thread_features_out_V_TVALID();
    void thread_fir_in_V_TREADY();
    void thread_interval_normalizati_U0_ap_continue();
    void thread_interval_normalizati_U0_ap_start();
    void thread_peak_detection_U0_ap_continue();
    void thread_peak_detection_U0_ap_start();
    void thread_start_for_compute_features_U0_din();
    void thread_start_for_interval_normalizati_U0_din();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
