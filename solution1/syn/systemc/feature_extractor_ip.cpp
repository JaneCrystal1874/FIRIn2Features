// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "feature_extractor_ip.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<32> feature_extractor_ip::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic feature_extractor_ip::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic feature_extractor_ip::ap_const_logic_0 = sc_dt::Log_0;

feature_extractor_ip::feature_extractor_ip(sc_module_name name) : sc_module(name), mVcdFile(0) {
    peak_detection_U0 = new peak_detection("peak_detection_U0");
    peak_detection_U0->ap_clk(ap_clk);
    peak_detection_U0->ap_rst(ap_rst_n_inv);
    peak_detection_U0->ap_start(peak_detection_U0_ap_start);
    peak_detection_U0->start_full_n(start_for_interval_normalizati_U0_full_n);
    peak_detection_U0->ap_done(peak_detection_U0_ap_done);
    peak_detection_U0->ap_continue(peak_detection_U0_ap_continue);
    peak_detection_U0->ap_idle(peak_detection_U0_ap_idle);
    peak_detection_U0->ap_ready(peak_detection_U0_ap_ready);
    peak_detection_U0->start_out(peak_detection_U0_start_out);
    peak_detection_U0->start_write(peak_detection_U0_start_write);
    peak_detection_U0->in_V_TDATA(fir_in_V_TDATA);
    peak_detection_U0->in_V_TVALID(fir_in_V_TVALID);
    peak_detection_U0->in_V_TREADY(peak_detection_U0_in_V_TREADY);
    peak_detection_U0->peak_loc_stream_V_V_din(peak_detection_U0_peak_loc_stream_V_V_din);
    peak_detection_U0->peak_loc_stream_V_V_full_n(peak_loc_stream_V_V_full_n);
    peak_detection_U0->peak_loc_stream_V_V_write(peak_detection_U0_peak_loc_stream_V_V_write);
    interval_normalizati_U0 = new interval_normalizati("interval_normalizati_U0");
    interval_normalizati_U0->ap_clk(ap_clk);
    interval_normalizati_U0->ap_rst(ap_rst_n_inv);
    interval_normalizati_U0->ap_start(interval_normalizati_U0_ap_start);
    interval_normalizati_U0->start_full_n(start_for_compute_features_U0_full_n);
    interval_normalizati_U0->ap_done(interval_normalizati_U0_ap_done);
    interval_normalizati_U0->ap_continue(interval_normalizati_U0_ap_continue);
    interval_normalizati_U0->ap_idle(interval_normalizati_U0_ap_idle);
    interval_normalizati_U0->ap_ready(interval_normalizati_U0_ap_ready);
    interval_normalizati_U0->start_out(interval_normalizati_U0_start_out);
    interval_normalizati_U0->start_write(interval_normalizati_U0_start_write);
    interval_normalizati_U0->peaks_V_V_dout(peak_loc_stream_V_V_dout);
    interval_normalizati_U0->peaks_V_V_empty_n(peak_loc_stream_V_V_empty_n);
    interval_normalizati_U0->peaks_V_V_read(interval_normalizati_U0_peaks_V_V_read);
    interval_normalizati_U0->normalized_out_V_din(interval_normalizati_U0_normalized_out_V_din);
    interval_normalizati_U0->normalized_out_V_full_n(normalized_stream_V_full_n);
    interval_normalizati_U0->normalized_out_V_write(interval_normalizati_U0_normalized_out_V_write);
    compute_features_U0 = new compute_features("compute_features_U0");
    compute_features_U0->ap_clk(ap_clk);
    compute_features_U0->ap_rst(ap_rst_n_inv);
    compute_features_U0->ap_start(compute_features_U0_ap_start);
    compute_features_U0->ap_done(compute_features_U0_ap_done);
    compute_features_U0->ap_continue(compute_features_U0_ap_continue);
    compute_features_U0->ap_idle(compute_features_U0_ap_idle);
    compute_features_U0->ap_ready(compute_features_U0_ap_ready);
    compute_features_U0->normalized_in_V_dout(normalized_stream_V_dout);
    compute_features_U0->normalized_in_V_empty_n(normalized_stream_V_empty_n);
    compute_features_U0->normalized_in_V_read(compute_features_U0_normalized_in_V_read);
    compute_features_U0->features_out_V_TDATA(compute_features_U0_features_out_V_TDATA);
    compute_features_U0->features_out_V_TVALID(compute_features_U0_features_out_V_TVALID);
    compute_features_U0->features_out_V_TREADY(features_out_V_TREADY);
    peak_loc_stream_V_V_U = new fifo_w10_d2_A("peak_loc_stream_V_V_U");
    peak_loc_stream_V_V_U->clk(ap_clk);
    peak_loc_stream_V_V_U->reset(ap_rst_n_inv);
    peak_loc_stream_V_V_U->if_read_ce(ap_var_for_const0);
    peak_loc_stream_V_V_U->if_write_ce(ap_var_for_const0);
    peak_loc_stream_V_V_U->if_din(peak_detection_U0_peak_loc_stream_V_V_din);
    peak_loc_stream_V_V_U->if_full_n(peak_loc_stream_V_V_full_n);
    peak_loc_stream_V_V_U->if_write(peak_detection_U0_peak_loc_stream_V_V_write);
    peak_loc_stream_V_V_U->if_dout(peak_loc_stream_V_V_dout);
    peak_loc_stream_V_V_U->if_empty_n(peak_loc_stream_V_V_empty_n);
    peak_loc_stream_V_V_U->if_read(interval_normalizati_U0_peaks_V_V_read);
    normalized_stream_V_U = new fifo_w32_d2_A("normalized_stream_V_U");
    normalized_stream_V_U->clk(ap_clk);
    normalized_stream_V_U->reset(ap_rst_n_inv);
    normalized_stream_V_U->if_read_ce(ap_var_for_const0);
    normalized_stream_V_U->if_write_ce(ap_var_for_const0);
    normalized_stream_V_U->if_din(interval_normalizati_U0_normalized_out_V_din);
    normalized_stream_V_U->if_full_n(normalized_stream_V_full_n);
    normalized_stream_V_U->if_write(interval_normalizati_U0_normalized_out_V_write);
    normalized_stream_V_U->if_dout(normalized_stream_V_dout);
    normalized_stream_V_U->if_empty_n(normalized_stream_V_empty_n);
    normalized_stream_V_U->if_read(compute_features_U0_normalized_in_V_read);
    start_for_intervaqcK_U = new start_for_intervaqcK("start_for_intervaqcK_U");
    start_for_intervaqcK_U->clk(ap_clk);
    start_for_intervaqcK_U->reset(ap_rst_n_inv);
    start_for_intervaqcK_U->if_read_ce(ap_var_for_const0);
    start_for_intervaqcK_U->if_write_ce(ap_var_for_const0);
    start_for_intervaqcK_U->if_din(start_for_interval_normalizati_U0_din);
    start_for_intervaqcK_U->if_full_n(start_for_interval_normalizati_U0_full_n);
    start_for_intervaqcK_U->if_write(peak_detection_U0_start_write);
    start_for_intervaqcK_U->if_dout(start_for_interval_normalizati_U0_dout);
    start_for_intervaqcK_U->if_empty_n(start_for_interval_normalizati_U0_empty_n);
    start_for_intervaqcK_U->if_read(interval_normalizati_U0_ap_ready);
    start_for_computercU_U = new start_for_computercU("start_for_computercU_U");
    start_for_computercU_U->clk(ap_clk);
    start_for_computercU_U->reset(ap_rst_n_inv);
    start_for_computercU_U->if_read_ce(ap_var_for_const0);
    start_for_computercU_U->if_write_ce(ap_var_for_const0);
    start_for_computercU_U->if_din(start_for_compute_features_U0_din);
    start_for_computercU_U->if_full_n(start_for_compute_features_U0_full_n);
    start_for_computercU_U->if_write(interval_normalizati_U0_start_write);
    start_for_computercU_U->if_dout(start_for_compute_features_U0_dout);
    start_for_computercU_U->if_empty_n(start_for_compute_features_U0_empty_n);
    start_for_computercU_U->if_read(compute_features_U0_ap_ready);

    SC_METHOD(thread_ap_done);
    sensitive << ( compute_features_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( peak_detection_U0_ap_idle );
    sensitive << ( interval_normalizati_U0_ap_idle );
    sensitive << ( compute_features_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( peak_detection_U0_ap_ready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( compute_features_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( peak_detection_U0_ap_ready );

    SC_METHOD(thread_compute_features_U0_ap_continue);

    SC_METHOD(thread_compute_features_U0_ap_start);
    sensitive << ( start_for_compute_features_U0_empty_n );

    SC_METHOD(thread_compute_features_U0_start_full_n);

    SC_METHOD(thread_compute_features_U0_start_write);

    SC_METHOD(thread_features_out_V_TDATA);
    sensitive << ( compute_features_U0_features_out_V_TDATA );

    SC_METHOD(thread_features_out_V_TVALID);
    sensitive << ( compute_features_U0_features_out_V_TVALID );

    SC_METHOD(thread_fir_in_V_TREADY);
    sensitive << ( peak_detection_U0_in_V_TREADY );

    SC_METHOD(thread_interval_normalizati_U0_ap_continue);

    SC_METHOD(thread_interval_normalizati_U0_ap_start);
    sensitive << ( start_for_interval_normalizati_U0_empty_n );

    SC_METHOD(thread_peak_detection_U0_ap_continue);

    SC_METHOD(thread_peak_detection_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_start_for_compute_features_U0_din);

    SC_METHOD(thread_start_for_interval_normalizati_U0_din);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "feature_extractor_ip_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, fir_in_V_TDATA, "(port)fir_in_V_TDATA");
    sc_trace(mVcdFile, features_out_V_TDATA, "(port)features_out_V_TDATA");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, fir_in_V_TVALID, "(port)fir_in_V_TVALID");
    sc_trace(mVcdFile, fir_in_V_TREADY, "(port)fir_in_V_TREADY");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, features_out_V_TVALID, "(port)features_out_V_TVALID");
    sc_trace(mVcdFile, features_out_V_TREADY, "(port)features_out_V_TREADY");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, peak_detection_U0_ap_start, "peak_detection_U0_ap_start");
    sc_trace(mVcdFile, peak_detection_U0_ap_done, "peak_detection_U0_ap_done");
    sc_trace(mVcdFile, peak_detection_U0_ap_continue, "peak_detection_U0_ap_continue");
    sc_trace(mVcdFile, peak_detection_U0_ap_idle, "peak_detection_U0_ap_idle");
    sc_trace(mVcdFile, peak_detection_U0_ap_ready, "peak_detection_U0_ap_ready");
    sc_trace(mVcdFile, peak_detection_U0_start_out, "peak_detection_U0_start_out");
    sc_trace(mVcdFile, peak_detection_U0_start_write, "peak_detection_U0_start_write");
    sc_trace(mVcdFile, peak_detection_U0_in_V_TREADY, "peak_detection_U0_in_V_TREADY");
    sc_trace(mVcdFile, peak_detection_U0_peak_loc_stream_V_V_din, "peak_detection_U0_peak_loc_stream_V_V_din");
    sc_trace(mVcdFile, peak_detection_U0_peak_loc_stream_V_V_write, "peak_detection_U0_peak_loc_stream_V_V_write");
    sc_trace(mVcdFile, interval_normalizati_U0_ap_start, "interval_normalizati_U0_ap_start");
    sc_trace(mVcdFile, interval_normalizati_U0_ap_done, "interval_normalizati_U0_ap_done");
    sc_trace(mVcdFile, interval_normalizati_U0_ap_continue, "interval_normalizati_U0_ap_continue");
    sc_trace(mVcdFile, interval_normalizati_U0_ap_idle, "interval_normalizati_U0_ap_idle");
    sc_trace(mVcdFile, interval_normalizati_U0_ap_ready, "interval_normalizati_U0_ap_ready");
    sc_trace(mVcdFile, interval_normalizati_U0_start_out, "interval_normalizati_U0_start_out");
    sc_trace(mVcdFile, interval_normalizati_U0_start_write, "interval_normalizati_U0_start_write");
    sc_trace(mVcdFile, interval_normalizati_U0_peaks_V_V_read, "interval_normalizati_U0_peaks_V_V_read");
    sc_trace(mVcdFile, interval_normalizati_U0_normalized_out_V_din, "interval_normalizati_U0_normalized_out_V_din");
    sc_trace(mVcdFile, interval_normalizati_U0_normalized_out_V_write, "interval_normalizati_U0_normalized_out_V_write");
    sc_trace(mVcdFile, compute_features_U0_ap_start, "compute_features_U0_ap_start");
    sc_trace(mVcdFile, compute_features_U0_ap_done, "compute_features_U0_ap_done");
    sc_trace(mVcdFile, compute_features_U0_ap_continue, "compute_features_U0_ap_continue");
    sc_trace(mVcdFile, compute_features_U0_ap_idle, "compute_features_U0_ap_idle");
    sc_trace(mVcdFile, compute_features_U0_ap_ready, "compute_features_U0_ap_ready");
    sc_trace(mVcdFile, compute_features_U0_normalized_in_V_read, "compute_features_U0_normalized_in_V_read");
    sc_trace(mVcdFile, compute_features_U0_features_out_V_TDATA, "compute_features_U0_features_out_V_TDATA");
    sc_trace(mVcdFile, compute_features_U0_features_out_V_TVALID, "compute_features_U0_features_out_V_TVALID");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, peak_loc_stream_V_V_full_n, "peak_loc_stream_V_V_full_n");
    sc_trace(mVcdFile, peak_loc_stream_V_V_dout, "peak_loc_stream_V_V_dout");
    sc_trace(mVcdFile, peak_loc_stream_V_V_empty_n, "peak_loc_stream_V_V_empty_n");
    sc_trace(mVcdFile, normalized_stream_V_full_n, "normalized_stream_V_full_n");
    sc_trace(mVcdFile, normalized_stream_V_dout, "normalized_stream_V_dout");
    sc_trace(mVcdFile, normalized_stream_V_empty_n, "normalized_stream_V_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, start_for_interval_normalizati_U0_din, "start_for_interval_normalizati_U0_din");
    sc_trace(mVcdFile, start_for_interval_normalizati_U0_full_n, "start_for_interval_normalizati_U0_full_n");
    sc_trace(mVcdFile, start_for_interval_normalizati_U0_dout, "start_for_interval_normalizati_U0_dout");
    sc_trace(mVcdFile, start_for_interval_normalizati_U0_empty_n, "start_for_interval_normalizati_U0_empty_n");
    sc_trace(mVcdFile, start_for_compute_features_U0_din, "start_for_compute_features_U0_din");
    sc_trace(mVcdFile, start_for_compute_features_U0_full_n, "start_for_compute_features_U0_full_n");
    sc_trace(mVcdFile, start_for_compute_features_U0_dout, "start_for_compute_features_U0_dout");
    sc_trace(mVcdFile, start_for_compute_features_U0_empty_n, "start_for_compute_features_U0_empty_n");
    sc_trace(mVcdFile, compute_features_U0_start_full_n, "compute_features_U0_start_full_n");
    sc_trace(mVcdFile, compute_features_U0_start_write, "compute_features_U0_start_write");
#endif

    }
    mHdltvinHandle.open("feature_extractor_ip.hdltvin.dat");
    mHdltvoutHandle.open("feature_extractor_ip.hdltvout.dat");
}

feature_extractor_ip::~feature_extractor_ip() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete peak_detection_U0;
    delete interval_normalizati_U0;
    delete compute_features_U0;
    delete peak_loc_stream_V_V_U;
    delete normalized_stream_V_U;
    delete start_for_intervaqcK_U;
    delete start_for_computercU_U;
}

void feature_extractor_ip::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void feature_extractor_ip::thread_ap_done() {
    ap_done = compute_features_U0_ap_done.read();
}

void feature_extractor_ip::thread_ap_idle() {
    ap_idle = (peak_detection_U0_ap_idle.read() & interval_normalizati_U0_ap_idle.read() & compute_features_U0_ap_idle.read());
}

void feature_extractor_ip::thread_ap_ready() {
    ap_ready = peak_detection_U0_ap_ready.read();
}

void feature_extractor_ip::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void feature_extractor_ip::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void feature_extractor_ip::thread_ap_sync_done() {
    ap_sync_done = compute_features_U0_ap_done.read();
}

void feature_extractor_ip::thread_ap_sync_ready() {
    ap_sync_ready = peak_detection_U0_ap_ready.read();
}

void feature_extractor_ip::thread_compute_features_U0_ap_continue() {
    compute_features_U0_ap_continue = ap_const_logic_1;
}

void feature_extractor_ip::thread_compute_features_U0_ap_start() {
    compute_features_U0_ap_start = start_for_compute_features_U0_empty_n.read();
}

void feature_extractor_ip::thread_compute_features_U0_start_full_n() {
    compute_features_U0_start_full_n = ap_const_logic_1;
}

void feature_extractor_ip::thread_compute_features_U0_start_write() {
    compute_features_U0_start_write = ap_const_logic_0;
}

void feature_extractor_ip::thread_features_out_V_TDATA() {
    features_out_V_TDATA = compute_features_U0_features_out_V_TDATA.read();
}

void feature_extractor_ip::thread_features_out_V_TVALID() {
    features_out_V_TVALID = compute_features_U0_features_out_V_TVALID.read();
}

void feature_extractor_ip::thread_fir_in_V_TREADY() {
    fir_in_V_TREADY = peak_detection_U0_in_V_TREADY.read();
}

void feature_extractor_ip::thread_interval_normalizati_U0_ap_continue() {
    interval_normalizati_U0_ap_continue = ap_const_logic_1;
}

void feature_extractor_ip::thread_interval_normalizati_U0_ap_start() {
    interval_normalizati_U0_ap_start = start_for_interval_normalizati_U0_empty_n.read();
}

void feature_extractor_ip::thread_peak_detection_U0_ap_continue() {
    peak_detection_U0_ap_continue = ap_const_logic_1;
}

void feature_extractor_ip::thread_peak_detection_U0_ap_start() {
    peak_detection_U0_ap_start = ap_start.read();
}

void feature_extractor_ip::thread_start_for_compute_features_U0_din() {
    start_for_compute_features_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void feature_extractor_ip::thread_start_for_interval_normalizati_U0_din() {
    start_for_interval_normalizati_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void feature_extractor_ip::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"fir_in_V_TDATA\" :  \"" << fir_in_V_TDATA.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"features_out_V_TDATA\" :  \"" << features_out_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"fir_in_V_TVALID\" :  \"" << fir_in_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"fir_in_V_TREADY\" :  \"" << fir_in_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"features_out_V_TVALID\" :  \"" << features_out_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"features_out_V_TREADY\" :  \"" << features_out_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

